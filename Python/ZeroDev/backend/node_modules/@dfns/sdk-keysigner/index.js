"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AsymmetricKeySigner = void 0;
const crypto = __importStar(require("node:crypto"));
const sdk_1 = require("@dfns/sdk");
const utils_1 = require("@dfns/sdk/utils");
class AsymmetricKeySigner {
    constructor(options) {
        this.options = options;
    }
    async sign(challenge) {
        const { credId, privateKey, algorithm } = this.options;
        const allowedCredId = challenge.allowCredentials.key.map((cred) => cred.id);
        if (!allowedCredId.includes(credId)) {
            throw new sdk_1.DfnsError(-1, `${credId} does not match allowed credentials: ${allowedCredId}`);
        }
        const clientData = Buffer.from(JSON.stringify({
            type: 'key.get',
            challenge: challenge.challenge,
        }));
        return {
            kind: 'Key',
            credentialAssertion: {
                credId,
                clientData: (0, utils_1.toBase64Url)(clientData),
                signature: (0, utils_1.toBase64Url)(crypto.sign(algorithm || undefined, clientData, privateKey)),
            },
        };
    }
}
exports.AsymmetricKeySigner = AsymmetricKeySigner;
