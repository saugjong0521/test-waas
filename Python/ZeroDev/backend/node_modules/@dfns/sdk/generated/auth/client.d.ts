import { DfnsApiClientOptions } from '../../types/generic';
import * as T from './types';
export declare class AuthClient {
    private apiOptions;
    constructor(apiOptions: DfnsApiClientOptions);
    activateCredential(request: T.ActivateCredentialRequest): Promise<T.ActivateCredentialResponse>;
    activatePersonalAccessToken(request: T.ActivatePersonalAccessTokenRequest): Promise<T.ActivatePersonalAccessTokenResponse>;
    activateServiceAccount(request: T.ActivateServiceAccountRequest): Promise<T.ActivateServiceAccountResponse>;
    activateUser(request: T.ActivateUserRequest): Promise<T.ActivateUserResponse>;
    archivePersonalAccessToken(request: T.ArchivePersonalAccessTokenRequest): Promise<T.ArchivePersonalAccessTokenResponse>;
    archiveServiceAccount(request: T.ArchiveServiceAccountRequest): Promise<T.ArchiveServiceAccountResponse>;
    archiveUser(request: T.ArchiveUserRequest): Promise<T.ArchiveUserResponse>;
    createCredential(request: T.CreateCredentialRequest): Promise<T.CreateCredentialResponse>;
    /** @deprecated, use createCredential instead */
    createUserCredential(request: T.CreateCredentialRequest): Promise<T.CreateCredentialResponse>;
    createCredentialChallenge(request: T.CreateCredentialChallengeRequest): Promise<T.CreateCredentialChallengeResponse>;
    /** @deprecated, use createCredentialChallenge instead */
    createUserCredentialChallenge(request: T.CreateCredentialChallengeRequest): Promise<T.CreateCredentialChallengeResponse>;
    createCredentialChallengeWithCode(request: T.CreateCredentialChallengeWithCodeRequest): Promise<T.CreateCredentialChallengeWithCodeResponse>;
    createCredentialCode(request: T.CreateCredentialCodeRequest): Promise<T.CreateCredentialCodeResponse>;
    createCredentialWithCode(request: T.CreateCredentialWithCodeRequest): Promise<T.CreateCredentialWithCodeResponse>;
    createDelegatedRecoveryChallenge(request: T.CreateDelegatedRecoveryChallengeRequest): Promise<T.CreateDelegatedRecoveryChallengeResponse>;
    /** @deprecated, use createDelegatedRecoveryChallenge instead */
    createDelegatedUserRecovery(request: T.CreateDelegatedRecoveryChallengeRequest): Promise<T.CreateDelegatedRecoveryChallengeResponse>;
    createDelegatedRegistrationChallenge(request: T.CreateDelegatedRegistrationChallengeRequest): Promise<T.CreateDelegatedRegistrationChallengeResponse>;
    /** @deprecated, use createDelegatedRegistrationChallenge instead */
    createDelegatedUserRegistration(request: T.CreateDelegatedRegistrationChallengeRequest): Promise<T.CreateDelegatedRegistrationChallengeResponse>;
    createLoginChallenge(request: T.CreateLoginChallengeRequest): Promise<T.CreateLoginChallengeResponse>;
    createPersonalAccessToken(request: T.CreatePersonalAccessTokenRequest): Promise<T.CreatePersonalAccessTokenResponse>;
    createRecoveryChallenge(request: T.CreateRecoveryChallengeRequest): Promise<T.CreateRecoveryChallengeResponse>;
    createRegistrationChallenge(request: T.CreateRegistrationChallengeRequest): Promise<T.CreateRegistrationChallengeResponse>;
    createServiceAccount(request: T.CreateServiceAccountRequest): Promise<T.CreateServiceAccountResponse>;
    createSocialRegistrationChallenge(request: T.CreateSocialRegistrationChallengeRequest): Promise<T.CreateSocialRegistrationChallengeResponse>;
    createUser(request: T.CreateUserRequest): Promise<T.CreateUserResponse>;
    createUserActionChallenge(request: T.CreateUserActionChallengeRequest): Promise<T.CreateUserActionChallengeResponse>;
    /** @deprecated, use createUserActionChallenge instead */
    createUserActionSignatureChallenge(request: T.CreateUserActionChallengeRequest): Promise<T.CreateUserActionChallengeResponse>;
    createUserActionSignature(request: T.CreateUserActionSignatureRequest): Promise<T.CreateUserActionSignatureResponse>;
    deactivateCredential(request: T.DeactivateCredentialRequest): Promise<T.DeactivateCredentialResponse>;
    deactivatePersonalAccessToken(request: T.DeactivatePersonalAccessTokenRequest): Promise<T.DeactivatePersonalAccessTokenResponse>;
    deactivateServiceAccount(request: T.DeactivateServiceAccountRequest): Promise<T.DeactivateServiceAccountResponse>;
    deactivateUser(request: T.DeactivateUserRequest): Promise<T.DeactivateUserResponse>;
    delegatedLogin(request: T.DelegatedLoginRequest): Promise<T.DelegatedLoginResponse>;
    /** @deprecated, use delegatedLogin instead */
    createDelegatedUserLogin(request: T.DelegatedLoginRequest): Promise<T.DelegatedLoginResponse>;
    getApplication(request: T.GetApplicationRequest): Promise<T.GetApplicationResponse>;
    getPersonalAccessToken(request: T.GetPersonalAccessTokenRequest): Promise<T.GetPersonalAccessTokenResponse>;
    getServiceAccount(request: T.GetServiceAccountRequest): Promise<T.GetServiceAccountResponse>;
    getUser(request: T.GetUserRequest): Promise<T.GetUserResponse>;
    listApplications(): Promise<T.ListApplicationsResponse>;
    listCredentials(): Promise<T.ListCredentialsResponse>;
    /** @deprecated, use listCredentials instead */
    listUserCredentials(): Promise<T.ListCredentialsResponse>;
    listPersonalAccessTokens(): Promise<T.ListPersonalAccessTokensResponse>;
    listServiceAccounts(): Promise<T.ListServiceAccountsResponse>;
    listUsers(request?: T.ListUsersRequest): Promise<T.ListUsersResponse>;
    login(request: T.LoginRequest): Promise<T.LoginResponse>;
    logout(request?: T.LogoutRequest): Promise<T.LogoutResponse>;
    recover(request: T.RecoverRequest): Promise<T.RecoverResponse>;
    /** @deprecated, use recover instead */
    createUserRecovery(request: T.RecoverRequest): Promise<T.RecoverResponse>;
    register(request: T.RegisterRequest): Promise<T.RegisterResponse>;
    /** @deprecated, use register instead */
    createUserRegistration(request: T.RegisterRequest): Promise<T.RegisterResponse>;
    registerEndUser(request: T.RegisterEndUserRequest): Promise<T.RegisterEndUserResponse>;
    resendRegistrationCode(request: T.ResendRegistrationCodeRequest): Promise<T.ResendRegistrationCodeResponse>;
    sendLoginCode(request: T.SendLoginCodeRequest): Promise<T.SendLoginCodeResponse>;
    sendRecoveryCode(request: T.SendRecoveryCodeRequest): Promise<T.SendRecoveryCodeResponse>;
    socialLogin(request: T.SocialLoginRequest): Promise<T.SocialLoginResponse>;
    updatePersonalAccessToken(request: T.UpdatePersonalAccessTokenRequest): Promise<T.UpdatePersonalAccessTokenResponse>;
    updateServiceAccount(request: T.UpdateServiceAccountRequest): Promise<T.UpdateServiceAccountResponse>;
}
