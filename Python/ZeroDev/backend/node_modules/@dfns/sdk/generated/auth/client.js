"use strict";
/* eslint @typescript-eslint/no-unused-vars: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthClient = void 0;
const fetch_1 = require("../../utils/fetch");
const userActionFetch_1 = require("../../utils/userActionFetch");
const url_1 = require("../../utils/url");
class AuthClient {
    constructor(apiOptions) {
        this.apiOptions = apiOptions;
    }
    async activateCredential(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/credentials/activate', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, userActionFetch_1.userActionFetch)(path, {
            method: 'PUT',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async activatePersonalAccessToken(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/pats/:tokenId/activate', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, userActionFetch_1.userActionFetch)(path, {
            method: 'PUT',
            body: {},
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async activateServiceAccount(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/service-accounts/:serviceAccountId/activate', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, userActionFetch_1.userActionFetch)(path, {
            method: 'PUT',
            body: {},
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async activateUser(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/users/:userId/activate', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, userActionFetch_1.userActionFetch)(path, {
            method: 'PUT',
            body: {},
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async archivePersonalAccessToken(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/pats/:tokenId', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, userActionFetch_1.userActionFetch)(path, {
            method: 'DELETE',
            body: {},
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async archiveServiceAccount(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/service-accounts/:serviceAccountId', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, userActionFetch_1.userActionFetch)(path, {
            method: 'DELETE',
            body: {},
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async archiveUser(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/users/:userId', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, userActionFetch_1.userActionFetch)(path, {
            method: 'DELETE',
            body: {},
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createCredential(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/credentials', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, userActionFetch_1.userActionFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    /** @deprecated, use createCredential instead */
    async createUserCredential(request) {
        return this.createCredential(request);
    }
    async createCredentialChallenge(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/credentials/init', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    /** @deprecated, use createCredentialChallenge instead */
    async createUserCredentialChallenge(request) {
        return this.createCredentialChallenge(request);
    }
    async createCredentialChallengeWithCode(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/credentials/code/init', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createCredentialCode(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/credentials/code', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, userActionFetch_1.userActionFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createCredentialWithCode(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/credentials/code/verify', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createDelegatedRecoveryChallenge(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/recover/user/delegated', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, userActionFetch_1.userActionFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    /** @deprecated, use createDelegatedRecoveryChallenge instead */
    async createDelegatedUserRecovery(request) {
        return this.createDelegatedRecoveryChallenge(request);
    }
    async createDelegatedRegistrationChallenge(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/registration/delegated', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, userActionFetch_1.userActionFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    /** @deprecated, use createDelegatedRegistrationChallenge instead */
    async createDelegatedUserRegistration(request) {
        return this.createDelegatedRegistrationChallenge(request);
    }
    async createLoginChallenge(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/login/init', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createPersonalAccessToken(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/pats', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, userActionFetch_1.userActionFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createRecoveryChallenge(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/recover/user/init', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createRegistrationChallenge(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/registration/init', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createServiceAccount(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/service-accounts', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, userActionFetch_1.userActionFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createSocialRegistrationChallenge(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/registration/social', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createUser(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/users', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, userActionFetch_1.userActionFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createUserActionChallenge(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/action/init', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    /** @deprecated, use createUserActionChallenge instead */
    async createUserActionSignatureChallenge(request) {
        return this.createUserActionChallenge(request);
    }
    async createUserActionSignature(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/action', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async deactivateCredential(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/credentials/deactivate', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, userActionFetch_1.userActionFetch)(path, {
            method: 'PUT',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async deactivatePersonalAccessToken(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/pats/:tokenId/deactivate', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, userActionFetch_1.userActionFetch)(path, {
            method: 'PUT',
            body: {},
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async deactivateServiceAccount(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/service-accounts/:serviceAccountId/deactivate', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, userActionFetch_1.userActionFetch)(path, {
            method: 'PUT',
            body: {},
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async deactivateUser(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/users/:userId/deactivate', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, userActionFetch_1.userActionFetch)(path, {
            method: 'PUT',
            body: {},
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async delegatedLogin(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/login/delegated', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, userActionFetch_1.userActionFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    /** @deprecated, use delegatedLogin instead */
    async createDelegatedUserLogin(request) {
        return this.delegatedLogin(request);
    }
    async getApplication(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/apps/:appId', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async getPersonalAccessToken(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/pats/:tokenId', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async getServiceAccount(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/service-accounts/:serviceAccountId', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async getUser(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/users/:userId', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async listApplications() {
        const path = (0, url_1.buildPathAndQuery)('/auth/apps', {
            path: {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async listCredentials() {
        const path = (0, url_1.buildPathAndQuery)('/auth/credentials', {
            path: {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    /** @deprecated, use listCredentials instead */
    async listUserCredentials() {
        return this.listCredentials();
    }
    async listPersonalAccessTokens() {
        const path = (0, url_1.buildPathAndQuery)('/auth/pats', {
            path: {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async listServiceAccounts() {
        const path = (0, url_1.buildPathAndQuery)('/auth/service-accounts', {
            path: {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async listUsers(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/users', {
            path: request ?? {},
            query: request?.query ?? {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async login(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/login', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async logout(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/logout', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'PUT',
            body: request?.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async recover(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/recover/user', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    /** @deprecated, use recover instead */
    async createUserRecovery(request) {
        return this.recover(request);
    }
    async register(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/registration', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    /** @deprecated, use register instead */
    async createUserRegistration(request) {
        return this.register(request);
    }
    async registerEndUser(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/registration/enduser', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async resendRegistrationCode(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/registration/code', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'PUT',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async sendLoginCode(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/login/code', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async sendRecoveryCode(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/recover/user/code', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async socialLogin(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/login/social', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async updatePersonalAccessToken(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/pats/:tokenId', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, userActionFetch_1.userActionFetch)(path, {
            method: 'PUT',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async updateServiceAccount(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/service-accounts/:serviceAccountId', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, userActionFetch_1.userActionFetch)(path, {
            method: 'PUT',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
}
exports.AuthClient = AuthClient;
