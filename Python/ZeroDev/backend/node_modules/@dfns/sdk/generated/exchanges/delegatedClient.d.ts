import { SignUserActionChallengeRequest, UserActionChallengeResponse } from '../../baseAuthApi';
import { DfnsDelegatedApiClientOptions } from '../../dfnsDelegatedApiClient';
import * as T from './types';
export declare class DelegatedExchangesClient {
    private apiOptions;
    constructor(apiOptions: DfnsDelegatedApiClientOptions);
    createDepositInit(request: T.CreateDepositRequest): Promise<UserActionChallengeResponse>;
    createDepositComplete(request: T.CreateDepositRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.CreateDepositResponse>;
    createExchangeInit(request: T.CreateExchangeRequest): Promise<UserActionChallengeResponse>;
    createExchangeComplete(request: T.CreateExchangeRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.CreateExchangeResponse>;
    createWithdrawalInit(request: T.CreateWithdrawalRequest): Promise<UserActionChallengeResponse>;
    createWithdrawalComplete(request: T.CreateWithdrawalRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.CreateWithdrawalResponse>;
    deleteExchangeInit(request: T.DeleteExchangeRequest): Promise<UserActionChallengeResponse>;
    deleteExchangeComplete(request: T.DeleteExchangeRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.DeleteExchangeResponse>;
    getExchange(request: T.GetExchangeRequest): Promise<T.GetExchangeResponse>;
    listAccountAssets(request: T.ListAccountAssetsRequest): Promise<T.ListAccountAssetsResponse>;
    listAccounts(request: T.ListAccountsRequest): Promise<T.ListAccountsResponse>;
    listAssetWithdrawalNetworks(request: T.ListAssetWithdrawalNetworksRequest): Promise<T.ListAssetWithdrawalNetworksResponse>;
    listExchanges(request?: T.ListExchangesRequest): Promise<T.ListExchangesResponse>;
}
