"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DelegatedKeysClient = void 0;
const baseAuthApi_1 = require("../../baseAuthApi");
const fetch_1 = require("../../utils/fetch");
const url_1 = require("../../utils/url");
class DelegatedKeysClient {
    constructor(apiOptions) {
        this.apiOptions = apiOptions;
    }
    async createKeyInit(request) {
        const path = (0, url_1.buildPathAndQuery)('/keys', {
            path: request ?? {},
            query: {},
        });
        const challenge = await baseAuthApi_1.BaseAuthApi.createUserActionChallenge({
            userActionHttpMethod: 'POST',
            userActionHttpPath: path,
            userActionPayload: JSON.stringify(request.body),
            userActionServerKind: 'Api',
        }, this.apiOptions);
        return challenge;
    }
    async createKeyComplete(request, signedChallenge) {
        const path = (0, url_1.buildPathAndQuery)('/keys', {
            path: request ?? {},
            query: {},
        });
        const { userAction } = await baseAuthApi_1.BaseAuthApi.signUserActionChallenge(signedChallenge, this.apiOptions);
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            headers: { 'x-dfns-useraction': userAction },
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async delegateKeyInit(request) {
        const path = (0, url_1.buildPathAndQuery)('/keys/:keyId/delegate', {
            path: request ?? {},
            query: {},
        });
        const challenge = await baseAuthApi_1.BaseAuthApi.createUserActionChallenge({
            userActionHttpMethod: 'POST',
            userActionHttpPath: path,
            userActionPayload: JSON.stringify(request.body),
            userActionServerKind: 'Api',
        }, this.apiOptions);
        return challenge;
    }
    async delegateKeyComplete(request, signedChallenge) {
        const path = (0, url_1.buildPathAndQuery)('/keys/:keyId/delegate', {
            path: request ?? {},
            query: {},
        });
        const { userAction } = await baseAuthApi_1.BaseAuthApi.signUserActionChallenge(signedChallenge, this.apiOptions);
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            headers: { 'x-dfns-useraction': userAction },
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async deleteKeyInit(request) {
        const path = (0, url_1.buildPathAndQuery)('/keys/:keyId', {
            path: request ?? {},
            query: {},
        });
        const challenge = await baseAuthApi_1.BaseAuthApi.createUserActionChallenge({
            userActionHttpMethod: 'DELETE',
            userActionHttpPath: path,
            userActionPayload: JSON.stringify({}),
            userActionServerKind: 'Api',
        }, this.apiOptions);
        return challenge;
    }
    async deleteKeyComplete(request, signedChallenge) {
        const path = (0, url_1.buildPathAndQuery)('/keys/:keyId', {
            path: request ?? {},
            query: {},
        });
        const { userAction } = await baseAuthApi_1.BaseAuthApi.signUserActionChallenge(signedChallenge, this.apiOptions);
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'DELETE',
            body: {},
            headers: { 'x-dfns-useraction': userAction },
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async deriveKeyInit(request) {
        const path = (0, url_1.buildPathAndQuery)('/keys/:keyId/derive', {
            path: request ?? {},
            query: {},
        });
        const challenge = await baseAuthApi_1.BaseAuthApi.createUserActionChallenge({
            userActionHttpMethod: 'POST',
            userActionHttpPath: path,
            userActionPayload: JSON.stringify(request.body),
            userActionServerKind: 'Api',
        }, this.apiOptions);
        return challenge;
    }
    async deriveKeyComplete(request, signedChallenge) {
        const path = (0, url_1.buildPathAndQuery)('/keys/:keyId/derive', {
            path: request ?? {},
            query: {},
        });
        const { userAction } = await baseAuthApi_1.BaseAuthApi.signUserActionChallenge(signedChallenge, this.apiOptions);
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            headers: { 'x-dfns-useraction': userAction },
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async exportKeyInit(request) {
        const path = (0, url_1.buildPathAndQuery)('/keys/:keyId/export', {
            path: request ?? {},
            query: {},
        });
        const challenge = await baseAuthApi_1.BaseAuthApi.createUserActionChallenge({
            userActionHttpMethod: 'POST',
            userActionHttpPath: path,
            userActionPayload: JSON.stringify(request.body),
            userActionServerKind: 'Api',
        }, this.apiOptions);
        return challenge;
    }
    async exportKeyComplete(request, signedChallenge) {
        const path = (0, url_1.buildPathAndQuery)('/keys/:keyId/export', {
            path: request ?? {},
            query: {},
        });
        const { userAction } = await baseAuthApi_1.BaseAuthApi.signUserActionChallenge(signedChallenge, this.apiOptions);
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            headers: { 'x-dfns-useraction': userAction },
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async generateSignatureInit(request) {
        const path = (0, url_1.buildPathAndQuery)('/keys/:keyId/signatures', {
            path: request ?? {},
            query: {},
        });
        const challenge = await baseAuthApi_1.BaseAuthApi.createUserActionChallenge({
            userActionHttpMethod: 'POST',
            userActionHttpPath: path,
            userActionPayload: JSON.stringify(request.body),
            userActionServerKind: 'Api',
        }, this.apiOptions);
        return challenge;
    }
    async generateSignatureComplete(request, signedChallenge) {
        const path = (0, url_1.buildPathAndQuery)('/keys/:keyId/signatures', {
            path: request ?? {},
            query: {},
        });
        const { userAction } = await baseAuthApi_1.BaseAuthApi.signUserActionChallenge(signedChallenge, this.apiOptions);
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            headers: { 'x-dfns-useraction': userAction },
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async getKey(request) {
        const path = (0, url_1.buildPathAndQuery)('/keys/:keyId', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async getSignature(request) {
        const path = (0, url_1.buildPathAndQuery)('/keys/:keyId/signatures/:signatureId', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async importKeyInit(request) {
        const path = (0, url_1.buildPathAndQuery)('/keys/import', {
            path: request ?? {},
            query: {},
        });
        const challenge = await baseAuthApi_1.BaseAuthApi.createUserActionChallenge({
            userActionHttpMethod: 'POST',
            userActionHttpPath: path,
            userActionPayload: JSON.stringify(request.body),
            userActionServerKind: 'Api',
        }, this.apiOptions);
        return challenge;
    }
    async importKeyComplete(request, signedChallenge) {
        const path = (0, url_1.buildPathAndQuery)('/keys/import', {
            path: request ?? {},
            query: {},
        });
        const { userAction } = await baseAuthApi_1.BaseAuthApi.signUserActionChallenge(signedChallenge, this.apiOptions);
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            headers: { 'x-dfns-useraction': userAction },
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async listKeys(request) {
        const path = (0, url_1.buildPathAndQuery)('/keys', {
            path: request ?? {},
            query: request?.query ?? {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async listSignatures(request) {
        const path = (0, url_1.buildPathAndQuery)('/keys/:keyId/signatures', {
            path: request ?? {},
            query: request.query ?? {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async updateKeyInit(request) {
        const path = (0, url_1.buildPathAndQuery)('/keys/:keyId', {
            path: request ?? {},
            query: {},
        });
        const challenge = await baseAuthApi_1.BaseAuthApi.createUserActionChallenge({
            userActionHttpMethod: 'PUT',
            userActionHttpPath: path,
            userActionPayload: JSON.stringify(request.body),
            userActionServerKind: 'Api',
        }, this.apiOptions);
        return challenge;
    }
    async updateKeyComplete(request, signedChallenge) {
        const path = (0, url_1.buildPathAndQuery)('/keys/:keyId', {
            path: request ?? {},
            query: {},
        });
        const { userAction } = await baseAuthApi_1.BaseAuthApi.signUserActionChallenge(signedChallenge, this.apiOptions);
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'PUT',
            body: request.body,
            headers: { 'x-dfns-useraction': userAction },
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
}
exports.DelegatedKeysClient = DelegatedKeysClient;
