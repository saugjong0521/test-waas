import { SignUserActionChallengeRequest, UserActionChallengeResponse } from '../../baseAuthApi';
import { DfnsDelegatedApiClientOptions } from '../../dfnsDelegatedApiClient';
import * as T from './types';
export declare class DelegatedPoliciesClient {
    private apiOptions;
    constructor(apiOptions: DfnsDelegatedApiClientOptions);
    archivePolicyInit(request: T.ArchivePolicyRequest): Promise<UserActionChallengeResponse>;
    archivePolicyComplete(request: T.ArchivePolicyRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.ArchivePolicyResponse>;
    createApprovalDecisionInit(request: T.CreateApprovalDecisionRequest): Promise<UserActionChallengeResponse>;
    createApprovalDecisionComplete(request: T.CreateApprovalDecisionRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.CreateApprovalDecisionResponse>;
    createPolicyInit(request: T.CreatePolicyRequest): Promise<UserActionChallengeResponse>;
    createPolicyComplete(request: T.CreatePolicyRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.CreatePolicyResponse>;
    getApproval(request: T.GetApprovalRequest): Promise<T.GetApprovalResponse>;
    getPolicy(request: T.GetPolicyRequest): Promise<T.GetPolicyResponse>;
    listApprovals(request?: T.ListApprovalsRequest): Promise<T.ListApprovalsResponse>;
    listPolicies(request?: T.ListPoliciesRequest): Promise<T.ListPoliciesResponse>;
    updatePolicyInit(request: T.UpdatePolicyRequest): Promise<UserActionChallengeResponse>;
    updatePolicyComplete(request: T.UpdatePolicyRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.UpdatePolicyResponse>;
}
