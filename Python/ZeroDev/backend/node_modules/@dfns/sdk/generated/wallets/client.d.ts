import { DfnsApiClientOptions } from '../../types/generic';
import * as T from './types';
export declare class WalletsClient {
    private apiOptions;
    constructor(apiOptions: DfnsApiClientOptions);
    broadcastTransaction(request: T.BroadcastTransactionRequest): Promise<T.BroadcastTransactionResponse>;
    createWallet(request: T.CreateWalletRequest): Promise<T.CreateWalletResponse>;
    delegateWallet(request: T.DelegateWalletRequest): Promise<T.DelegateWalletResponse>;
    exportWallet(request: T.ExportWalletRequest): Promise<T.ExportWalletResponse>;
    generateSignature(request: T.GenerateSignatureRequest): Promise<T.GenerateSignatureResponse>;
    getSignature(request: T.GetSignatureRequest): Promise<T.GetSignatureResponse>;
    getTransaction(request: T.GetTransactionRequest): Promise<T.GetTransactionResponse>;
    getTransfer(request: T.GetTransferRequest): Promise<T.GetTransferResponse>;
    getWallet(request: T.GetWalletRequest): Promise<T.GetWalletResponse>;
    getWalletAssets(request: T.GetWalletAssetsRequest): Promise<T.GetWalletAssetsResponse>;
    getWalletHistory(request: T.GetWalletHistoryRequest): Promise<T.GetWalletHistoryResponse>;
    getWalletNfts(request: T.GetWalletNftsRequest): Promise<T.GetWalletNftsResponse>;
    importWallet(request: T.ImportWalletRequest): Promise<T.ImportWalletResponse>;
    listSignatures(request: T.ListSignaturesRequest): Promise<T.ListSignaturesResponse>;
    listTransactions(request: T.ListTransactionsRequest): Promise<T.ListTransactionsResponse>;
    listTransfers(request: T.ListTransfersRequest): Promise<T.ListTransfersResponse>;
    listWallets(request?: T.ListWalletsRequest): Promise<T.ListWalletsResponse>;
    tagWallet(request: T.TagWalletRequest): Promise<T.TagWalletResponse>;
    transferAsset(request: T.TransferAssetRequest): Promise<T.TransferAssetResponse>;
    untagWallet(request: T.UntagWalletRequest): Promise<T.UntagWalletResponse>;
    updateWallet(request: T.UpdateWalletRequest): Promise<T.UpdateWalletResponse>;
}
