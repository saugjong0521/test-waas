import { SignUserActionChallengeRequest, UserActionChallengeResponse } from '../../baseAuthApi';
import { DfnsDelegatedApiClientOptions } from '../../dfnsDelegatedApiClient';
import * as T from './types';
export declare class DelegatedWalletsClient {
    private apiOptions;
    constructor(apiOptions: DfnsDelegatedApiClientOptions);
    broadcastTransactionInit(request: T.BroadcastTransactionRequest): Promise<UserActionChallengeResponse>;
    broadcastTransactionComplete(request: T.BroadcastTransactionRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.BroadcastTransactionResponse>;
    createWalletInit(request: T.CreateWalletRequest): Promise<UserActionChallengeResponse>;
    createWalletComplete(request: T.CreateWalletRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.CreateWalletResponse>;
    delegateWalletInit(request: T.DelegateWalletRequest): Promise<UserActionChallengeResponse>;
    delegateWalletComplete(request: T.DelegateWalletRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.DelegateWalletResponse>;
    exportWalletInit(request: T.ExportWalletRequest): Promise<UserActionChallengeResponse>;
    exportWalletComplete(request: T.ExportWalletRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.ExportWalletResponse>;
    generateSignatureInit(request: T.GenerateSignatureRequest): Promise<UserActionChallengeResponse>;
    generateSignatureComplete(request: T.GenerateSignatureRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.GenerateSignatureResponse>;
    getSignature(request: T.GetSignatureRequest): Promise<T.GetSignatureResponse>;
    getTransaction(request: T.GetTransactionRequest): Promise<T.GetTransactionResponse>;
    getTransfer(request: T.GetTransferRequest): Promise<T.GetTransferResponse>;
    getWallet(request: T.GetWalletRequest): Promise<T.GetWalletResponse>;
    getWalletAssets(request: T.GetWalletAssetsRequest): Promise<T.GetWalletAssetsResponse>;
    getWalletHistory(request: T.GetWalletHistoryRequest): Promise<T.GetWalletHistoryResponse>;
    getWalletNfts(request: T.GetWalletNftsRequest): Promise<T.GetWalletNftsResponse>;
    importWalletInit(request: T.ImportWalletRequest): Promise<UserActionChallengeResponse>;
    importWalletComplete(request: T.ImportWalletRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.ImportWalletResponse>;
    listSignatures(request: T.ListSignaturesRequest): Promise<T.ListSignaturesResponse>;
    listTransactions(request: T.ListTransactionsRequest): Promise<T.ListTransactionsResponse>;
    listTransfers(request: T.ListTransfersRequest): Promise<T.ListTransfersResponse>;
    listWallets(request?: T.ListWalletsRequest): Promise<T.ListWalletsResponse>;
    tagWalletInit(request: T.TagWalletRequest): Promise<UserActionChallengeResponse>;
    tagWalletComplete(request: T.TagWalletRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.TagWalletResponse>;
    transferAssetInit(request: T.TransferAssetRequest): Promise<UserActionChallengeResponse>;
    transferAssetComplete(request: T.TransferAssetRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.TransferAssetResponse>;
    untagWalletInit(request: T.UntagWalletRequest): Promise<UserActionChallengeResponse>;
    untagWalletComplete(request: T.UntagWalletRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.UntagWalletResponse>;
    updateWalletInit(request: T.UpdateWalletRequest): Promise<UserActionChallengeResponse>;
    updateWalletComplete(request: T.UpdateWalletRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.UpdateWalletResponse>;
}
