import { SignUserActionChallengeRequest, UserActionChallengeResponse } from '../../baseAuthApi';
import { DfnsDelegatedApiClientOptions } from '../../dfnsDelegatedApiClient';
import * as T from './types';
export declare class DelegatedWebhooksClient {
    private apiOptions;
    constructor(apiOptions: DfnsDelegatedApiClientOptions);
    createWebhookInit(request: T.CreateWebhookRequest): Promise<UserActionChallengeResponse>;
    createWebhookComplete(request: T.CreateWebhookRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.CreateWebhookResponse>;
    deleteWebhookInit(request: T.DeleteWebhookRequest): Promise<UserActionChallengeResponse>;
    deleteWebhookComplete(request: T.DeleteWebhookRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.DeleteWebhookResponse>;
    getWebhook(request: T.GetWebhookRequest): Promise<T.GetWebhookResponse>;
    getWebhookEvent(request: T.GetWebhookEventRequest): Promise<T.GetWebhookEventResponse>;
    listWebhookEvents(request: T.ListWebhookEventsRequest): Promise<T.ListWebhookEventsResponse>;
    listWebhooks(request?: T.ListWebhooksRequest): Promise<T.ListWebhooksResponse>;
    pingWebhookInit(request: T.PingWebhookRequest): Promise<UserActionChallengeResponse>;
    pingWebhookComplete(request: T.PingWebhookRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.PingWebhookResponse>;
    updateWebhookInit(request: T.UpdateWebhookRequest): Promise<UserActionChallengeResponse>;
    updateWebhookComplete(request: T.UpdateWebhookRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.UpdateWebhookResponse>;
}
