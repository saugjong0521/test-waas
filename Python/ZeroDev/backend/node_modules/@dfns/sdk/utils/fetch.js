"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.simpleFetch = exports.dfnsAuth = exports.catchPolicyPending = exports.errorHandler = exports.jsonSerializer = exports.fullUrl = void 0;
const cross_fetch_1 = require("cross-fetch");
const dfnsError_1 = require("../dfnsError");
const DEFAULT_DFNS_BASE_URL = 'https://api.dfns.io';
const package_json_1 = require("../package.json");
const authToken_1 = require("./authToken");
const fullUrl = (fetch) => {
    return async (resource, options) => {
        const baseUrl = options.apiOptions.baseUrl || DEFAULT_DFNS_BASE_URL;
        resource = new URL(resource, baseUrl);
        return fetch(resource, options);
    };
};
exports.fullUrl = fullUrl;
const jsonSerializer = (fetch) => {
    return async (resource, options) => {
        if (options.body) {
            options.body = JSON.stringify(options.body);
            options.headers = {
                'content-type': 'application/json',
                ...(options.headers ?? {}),
            };
        }
        return fetch(resource, options);
    };
};
exports.jsonSerializer = jsonSerializer;
const errorHandler = (fetch) => {
    return async (resource, options) => {
        const response = await fetch(resource, options);
        if (response.ok) {
            return response;
        }
        else {
            const body = await response.json();
            const message = body?.error?.message ?? body?.message;
            throw new dfnsError_1.DfnsError(response.status, message, {
                url: response.url,
                headers: response.headers,
                body,
            });
        }
    };
};
exports.errorHandler = errorHandler;
// raise a 202 response by policy execution as error
const catchPolicyPending = (fetch) => {
    return async (resource, options) => {
        const response = await fetch(resource, options);
        if (response.status === dfnsError_1.PolicyPendingError.HTTP_ACCEPTED) {
            throw new dfnsError_1.PolicyPendingError(await response.json());
        }
        else {
            return response;
        }
    };
};
exports.catchPolicyPending = catchPolicyPending;
const dfnsAuth = (fetch) => {
    return async (resource, options) => {
        const { orgId, authToken } = options.apiOptions;
        if (authToken && orgId) {
            (0, authToken_1.assertAuthTokenIsSameOrg)({ orgId, authToken });
        }
        const authorization = authToken
            ? {
                authorization: `Bearer ${authToken}`,
            }
            : {};
        options.headers = {
            'x-dfns-sdk-version': package_json_1.version,
            ...authorization,
            ...(options.headers ?? {}),
        };
        return fetch(resource, options);
    };
};
exports.dfnsAuth = dfnsAuth;
exports.simpleFetch = (0, exports.fullUrl)((0, exports.jsonSerializer)((0, exports.dfnsAuth)((0, exports.catchPolicyPending)((0, exports.errorHandler)(cross_fetch_1.fetch)))));
