"use strict";var e=require("zod"),t=require("@privy-io/api-base"),i=require("../../api.js"),a=require("../../core.js"),r=require("../../transaction.js"),n=require("../export.js"),s=require("./spark/index.js"),o=require("./spark/utils.js");require("bs58"),require("libphonenumber-js/max"),require("viem");const p=e.z.enum(["secp256k1","ed25519"]),l=e.z.string().regex(/^[mM]'?(\/\d+'?)*$/),c=e.z.literal("ECDSA"),d=e.z.literal("EdDSA"),z=e.z.union([c,d]),u=e.z.string().regex(/^[-a-z0-9]{3,8}:[-_a-zA-Z0-9]{1,32}$/,"Chain ID must be a valid CAIP-2 chain ID, e.g. 'eip155:1'");let g=e.z.object({address:a.SolanaWalletAddress.optional(),chain_type:e.z.literal("solana").optional(),wallet_id:e.z.string().optional()}),h=e.z.object({address:a.WalletAddress.optional(),chain_type:e.z.literal("ethereum").optional(),wallet_id:e.z.string().optional()});const m=e.z.enum(["root","manager","delegated-actions"]).nullable(),_=e.z.object({method:e.z.literal("signTransaction"),params:e.z.object({transaction:e.z.string(),encoding:e.z.literal("base64")}).strict()}).merge(g).strict(),x=e.z.object({method:e.z.literal("signAndSendTransaction"),caip2:u,params:e.z.object({transaction:e.z.string(),encoding:e.z.literal("base64")}).strict()}).merge(g).strict(),b=e.z.object({method:e.z.literal("signMessage"),params:e.z.object({message:e.z.string(),encoding:e.z.literal("base64")}).strict()}).merge(g).strict(),R=e.z.string().startsWith("0x").refine((e=>!e.includes(".")),"Invalid hex string: must start with '0x' and not contain decimal points"),y=R.transform((e=>e));let A=e.z.number().int().nonnegative().safe({message:'Please use hex string prefixed with "0x" to represent large numbers (e.g. "0xDE0B6B3A7640000").'});const W=e.z.union([R,A],{invalid_type_error:"Invalid quantity: must be either a hex string starting with '0x' or a non-negative integer."}),I=e.z.object({from:a.WalletAddress.optional(),to:a.WalletAddress.optional(),chain_id:W.optional(),nonce:W.optional(),data:R.optional(),value:W.optional(),type:e.z.union([e.z.literal(0),e.z.literal(1),e.z.literal(2)]).optional(),gas_limit:W.optional(),gas_price:W.optional(),max_fee_per_gas:W.optional(),max_priority_fee_per_gas:W.optional()}).strict(),v=e.z.object({method:e.z.literal("eth_signTransaction"),params:e.z.object({transaction:I}).strict()}).merge(h).strict(),S=e.z.object({method:e.z.literal("eth_sendTransaction"),caip2:u,params:e.z.object({transaction:I}).strict()}).merge(h).strict(),j=e.z.object({message:e.z.string(),encoding:e.z.union([e.z.literal("utf-8"),e.z.literal("hex")])}).strict(),T=e.z.object({method:e.z.literal("personal_sign"),params:j}).merge(h).strict(),k=e.z.object({method:e.z.literal("secp256k1_sign"),params:e.z.object({hash:y}).strict()}).merge(h).strict(),D=e.z.object({method:e.z.literal("eth_sign7702Authorization"),params:e.z.object({contract:a.WalletAddress,chain_id:W,nonce:W.optional()}).strict()}).merge(h).strict(),f=e.z.object({params:e.z.object({hash:y}).strict()}).strict(),C=e.z.record(e.z.string(),e.z.any()),w=e.z.record(e.z.array(e.z.object({name:e.z.string(),type:e.z.string()}))),E=e.z.object({method:e.z.literal("eth_signTypedData_v4"),params:e.z.object({typed_data:e.z.object({domain:C,types:w,message:e.z.record(e.z.string(),e.z.any()),primary_type:e.z.string()}).strict()}).strict()}).merge(h).strict(),P=e.z.object({address:e.z.string(),method:e.z.literal("exportPrivateKey"),params:n.PrivateKeyExportInput}).strict(),G=e.z.discriminatedUnion("method",[v,S,T,E,k,D]),q=e.z.discriminatedUnion("method",[_,x,b]),L=e.z.union([G,q,P,s.WalletApiSparkRpcInput]),B=e.z.object({method:e.z.literal("signTransaction"),data:e.z.object({signed_transaction:e.z.string(),encoding:e.z.literal("base64")})}),K=e.z.object({method:e.z.literal("signAndSendTransaction"),data:e.z.object({transaction_id:e.z.string().optional(),hash:e.z.string(),caip2:u}).optional(),error:e.z.object({code:e.z.string(),message:e.z.string()}).optional()}),O=e.z.object({method:e.z.literal("signMessage"),data:e.z.object({signature:e.z.string(),encoding:e.z.literal("base64")})}),N=e.z.object({method:e.z.literal("eth_signTransaction"),data:e.z.object({signed_transaction:e.z.string(),encoding:e.z.literal("rlp")})}),Q=e.z.object({method:e.z.literal("eth_sendTransaction"),data:e.z.object({transaction_id:e.z.string().optional(),hash:e.z.string(),caip2:u,transaction_request:I.optional()}).optional(),error:e.z.object({code:e.z.string(),message:e.z.string()}).optional()}),U=e.z.object({method:e.z.literal("personal_sign"),data:e.z.object({signature:e.z.string(),encoding:e.z.literal("hex")})}),M=e.z.object({method:e.z.literal("secp256k1_sign"),data:e.z.object({signature:R,encoding:e.z.literal("hex")})});let F=e.z.object({contract:a.WalletAddress,chain_id:W,nonce:W,r:R,s:R,y_parity:e.z.number()});const H=e.z.object({method:e.z.literal("eth_sign7702Authorization"),data:e.z.object({authorization:F}).optional(),error:e.z.object({code:e.z.string(),message:e.z.string()}).optional()}),V=e.z.object({method:e.z.literal("eth_signTypedData_v4"),data:e.z.object({signature:e.z.string(),encoding:e.z.literal("hex")})}),$=e.z.object({method:e.z.literal("exportPrivateKey"),data:n.PrivateKeyExportInput}),Z=e.z.object({data:e.z.object({signature:R,encoding:e.z.literal("hex")}).optional(),error:e.z.object({code:e.z.string(),message:e.z.string()}).optional()}).strict(),J=e.z.discriminatedUnion("method",[B,K,O,N,Q,U,M,H,V,$,s.WalletApiTransferRpcResponse,s.WalletApiGetBalanceRpcResponse,s.WalletApiTransferTokensRpcResponse,s.WalletApiGetStaticDepositAddressRpcResponse,s.WalletApiClaimStaticDepositRpcResponse,s.WalletApiGetClaimStaticDepositQuoteRpcResponse,s.WalletApiPayLightningInvoiceRpcResponse,s.WalletApiCreateLightningInvoiceRpcResponse]),X=e.z.object({display_name:e.z.string().optional(),public_key:e.z.string(),role:m.optional()}),Y=e.z.literal("ethereum"),ee=e.z.literal("solana"),te=e.z.literal("cosmos"),ie=e.z.literal("stellar"),ae=e.z.literal("sui"),re=e.z.literal("tron"),ne=e.z.literal("bitcoin-segwit"),se=e.z.literal("spark"),oe=e.z.union([te,ie,ae,re,ne]),pe=e.z.literal("curve_signing"),le=e.z.union([oe,se]),ce=e.z.union([e.z.literal("solana"),e.z.literal("ethereum")]),de=e.z.union([le,ce]),ze=e.z.enum(["hd","private-key"]),ue=e.z.object({id:e.z.string(),address:e.z.string(),public_key:e.z.string().optional(),created_at:e.z.number(),exported_at:e.z.number().nullable(),imported_at:e.z.number().nullable(),chain_type:de,policy_ids:e.z.array(e.z.string()),authorization_threshold:e.z.number().optional(),additional_signers:e.z.array(e.z.object({signer_id:e.z.string().cuid2(),override_policy_ids:e.z.array(e.z.string()).optional()})),owner_id:e.z.string().cuid2().nullable()}),ge=e.z.string().cuid2(),he=e.z.string(),me=e.z.union([e.z.object({user_id:e.z.string().startsWith("did:privy:",{message:"user_id must start with did:privy:"})}).strict(),e.z.object({public_key:he}).strict(),e.z.null()]),_e={owner:me.optional(),owner_id:ge.nullable().optional()},xe=e.z.array(e.z.string().cuid2()).max(1,"Only one policy ID can be set").optional(),be=e.z.array(e.z.object({signer_id:ge,override_policy_ids:xe}).strict()),Re=e.z.object({chain_type:de,policy_ids:xe,authorization_key_ids:e.z.array(e.z.string()).optional(),authorization_threshold:e.z.number().optional(),additional_signers:be.optional(),..._e}).strict(),ye=Re.refine((e=>{let t=void 0!==e.authorization_key_ids||void 0!==e.authorization_threshold,i=void 0!==e.additional_signers;return!t||!i}),"Please provide either additional_signers or authorization_key_ids, not both").refine((e=>void 0===e.authorization_threshold||e.authorization_threshold>=1&&e.authorization_key_ids&&e.authorization_threshold<=e.authorization_key_ids.length),{message:"If specified, authorization_threshold must be an integer between 1 and the length of authorization_key_ids."}).refine((e=>!e.owner||!e.owner_id),{message:"Only one of owner or owner_id can be provided."}).catch((e=>{throw new t.InvalidInputError(e.error.message,t.PrivyErrorCode.INVALID_DATA)})),Ae=e.z.object({id:e.z.string(),chain_type:de,address:e.z.string(),authorization_threshold:e.z.number().optional()}),We=e.z.object({wallet_id:e.z.string({required_error:"Wallet ID must be provided",invalid_type_error:"Wallet ID is not a valid string"}).min(1)}).catch((({error:e})=>{throw new t.InvalidInputError(e.message,t.PrivyErrorCode.INVALID_DATA)})),Ie=e.z.enum(["usdc","eth","pol"]),ve=e.z.enum(["sol"]),Se=e.z.enum([...Ie.options,...ve.options]),je=e.z.enum(["ethereum","arbitrum","base","linea","optimism","polygon","solana","zksync_era"]),Te=e.z.enum(["usd"]),ke=e.z.object({asset:e.z.union([Se,e.z.array(Se).max(10)]),chain:e.z.union([je,e.z.array(je).max(10)]),include_currency:Te.optional()}),De=e.z.object({chain:je,asset:Se,raw_value:e.z.string(),raw_value_decimals:e.z.number(),display_values:e.z.record(e.z.union([Se,Te]),e.z.string())}),fe=e.z.object({balances:e.z.array(De.refine((e=>e.asset in e.display_values),{message:"display_values must include the asset as a key",path:["display_values"]}))}),Ce=e.z.object({id:e.z.string()}),we=e.z.object({id:e.z.string(),display_name:e.z.string().nullable(),public_key:e.z.string(),role:m,created_at:e.z.number()}),Ee=e.z.object({id:e.z.string(),display_name:e.z.string().nullable(),public_key:e.z.string(),created_at:e.z.number()}),Pe=i.Pagination.extend({chain_type:de.optional(),user_id:e.z.string().optional()}).strict(),Ge=e.z.object({policy_ids:xe,authorization_key_ids:e.z.array(e.z.string()).optional(),authorization_threshold:e.z.number().optional(),additional_signers:be.optional(),..._e}).strict().superRefine(((e,t)=>{Object.values(e).every((e=>void 0===e||""===e))&&t.addIssue({code:"custom",message:"At least one field must be provided"}),void 0!==e.owner&&void 0!==e.owner_id&&t.addIssue({code:"custom",message:"Only one of owner or owner_id can be provided."}),void 0!==e.authorization_threshold&&0!==e.authorization_threshold&&(e.authorization_threshold<0&&t.addIssue({code:"custom",path:["authorization_threshold"],message:"`authorization_threshold` must be non-negative if specified."}),void 0===e.authorization_key_ids&&t.addIssue({code:"custom",path:["authorization_key_ids"],message:"An array of `authorization_key_ids` must be provided for a non-zero `authorization_threshold`."}),e.authorization_key_ids&&e.authorization_threshold>e.authorization_key_ids.length&&t.addIssue({code:"custom",path:["authorization_threshold"],message:"`authorization_threshold` must be non-negative if specified."}))})),qe=i.Pagination.extend({chain:e.z.literal("base"),asset:e.z.union([Se,e.z.array(Se).max(2)])}).strict(),Le=e.z.object({type:e.z.literal("transfer_sent"),sender:e.z.string(),sender_privy_user_id:e.z.string().nullable(),recipient:e.z.string(),recipient_privy_user_id:e.z.string().nullable()}).strict().merge(De),Be=e.z.object({type:e.z.literal("transfer_received"),sender:e.z.string(),sender_privy_user_id:e.z.string().nullable(),recipient:e.z.string(),recipient_privy_user_id:e.z.string().nullable()}).strict().merge(De),Ke=e.z.discriminatedUnion("type",[Le,Be]),Oe=r.BaseTransactionResponse.extend({details:Ke.nullable()}),Ne=Oe.extend({privy_transaction_id:e.z.string(),wallet_id:e.z.string()}),Qe=e.z.object({transactions:e.z.array(Ne),next_cursor:e.z.string().nullable()});exports.WalletApiClaimStaticDepositRpcInput=s.WalletApiClaimStaticDepositRpcInput,exports.WalletApiClaimStaticDepositRpcResponse=s.WalletApiClaimStaticDepositRpcResponse,exports.WalletApiCreateLightningInvoiceRpcInput=s.WalletApiCreateLightningInvoiceRpcInput,exports.WalletApiCreateLightningInvoiceRpcResponse=s.WalletApiCreateLightningInvoiceRpcResponse,exports.WalletApiGetBalanceRpcInput=s.WalletApiGetBalanceRpcInput,exports.WalletApiGetBalanceRpcResponse=s.WalletApiGetBalanceRpcResponse,exports.WalletApiGetClaimStaticDepositQuoteRpcInput=s.WalletApiGetClaimStaticDepositQuoteRpcInput,exports.WalletApiGetClaimStaticDepositQuoteRpcResponse=s.WalletApiGetClaimStaticDepositQuoteRpcResponse,exports.WalletApiGetStaticDepositAddressRpcInput=s.WalletApiGetStaticDepositAddressRpcInput,exports.WalletApiGetStaticDepositAddressRpcResponse=s.WalletApiGetStaticDepositAddressRpcResponse,exports.WalletApiPayLightningInvoiceRpcInput=s.WalletApiPayLightningInvoiceRpcInput,exports.WalletApiPayLightningInvoiceRpcResponse=s.WalletApiPayLightningInvoiceRpcResponse,exports.WalletApiSparkRpcInput=s.WalletApiSparkRpcInput,exports.WalletApiTransferRpcInput=s.WalletApiTransferRpcInput,exports.WalletApiTransferRpcResponse=s.WalletApiTransferRpcResponse,exports.WalletApiTransferTokensRpcInput=s.WalletApiTransferTokensRpcInput,exports.WalletApiTransferTokensRpcResponse=s.WalletApiTransferTokensRpcResponse,exports.OutputWithPreviousTransactionData=o.OutputWithPreviousTransactionData,exports.SparkBalance=o.SparkBalance,exports.SparkLightningReceiveRequest=o.SparkLightningReceiveRequest,exports.SparkLightningSendRequest=o.SparkLightningSendRequest,exports.SparkNetwork=o.SparkNetwork,exports.SparkTransfer=o.SparkTransfer,exports.AdditionalSignerInput=be,exports.Asset=Se,exports.AssetAmountDetails=De,exports.AuthorizationKeyDashboardResponse=we,exports.AuthorizationKeyResponse=Ee,exports.AuthorizationKeyRole=m,exports.BalanceFiatCurrency=Te,exports.BaseWalletApiCreateInput=Re,exports.BitcoinSegwit=ne,exports.CAIP2=u,exports.CURVE_SIGNING="curve_signing",exports.ChainNameInput=je,exports.ChainType=de,exports.Cosmos=te,exports.CurveSigningChainTypes=oe,exports.CurveSigningLiteral=pe,exports.CurveType=p,exports.ECDSA=c,exports.EdDSA=d,exports.Ethereum=Y,exports.EthereumAsset=Ie,exports.ExtendedChainTypes=le,exports.FirstClassChainTypes=ce,exports.HDPath=l,exports.Hash=y,exports.Hex=R,exports.KeyQuorumId=ge,exports.OwnerInput=me,exports.OwnerInputFields=_e,exports.P256PublicKey=he,exports.PolicyInput=xe,exports.PrivyTransactionResponseWithDetails=Ne,exports.Quantity=W,exports.SigningAlgorithm=z,exports.Solana=ee,exports.SolanaAsset=ve,exports.Spark=se,exports.Stellar=ie,exports.Sui=ae,exports.TransactionDetail=Ke,exports.TransactionResponseWithDetails=Oe,exports.TransferReceivedTransactionDetail=Be,exports.TransferSentTransactionDetail=Le,exports.Tron=re,exports.TypedDataDomainInputParams=C,exports.TypedDataTypesInputParams=w,exports.UnsignedEthereumTransaction=I,exports.WalletApiCreateInput=ye,exports.WalletApiCreateResponse=Ae,exports.WalletApiEthereumPersonalSignRpcInput=T,exports.WalletApiEthereumPersonalSignRpcInputParams=j,exports.WalletApiEthereumPersonalSignRpcResponse=U,exports.WalletApiEthereumRpcInput=G,exports.WalletApiEthereumSecp256k1SignRpcInput=k,exports.WalletApiEthereumSecp256k1SignRpcResponse=M,exports.WalletApiEthereumSendTransactionRpcInput=S,exports.WalletApiEthereumSendTransactionRpcResponse=Q,exports.WalletApiEthereumSign7702AuthorizationRpcInput=D,exports.WalletApiEthereumSign7702AuthorizationRpcResponse=H,exports.WalletApiEthereumSignTransactionRpcInput=v,exports.WalletApiEthereumSignTransactionRpcResponse=N,exports.WalletApiEthereumSignTypedDataRpcInput=E,exports.WalletApiEthereumSignTypedDataRpcResponse=V,exports.WalletApiExportPrivateKeyRpcInput=P,exports.WalletApiExportPrivateKeyRpcResponse=$,exports.WalletApiRawSignInput=f,exports.WalletApiRawSignResponse=Z,exports.WalletApiRegisterAuthorizationKeyInput=X,exports.WalletApiRevokeAuthorizationKeyInput=Ce,exports.WalletApiRpcInput=L,exports.WalletApiRpcResponse=J,exports.WalletApiSolanaRpcInput=q,exports.WalletApiSolanaSignAndSendTransactionRpcInput=x,exports.WalletApiSolanaSignAndSendTransactionRpcResponse=K,exports.WalletApiSolanaSignMessageRpcInput=b,exports.WalletApiSolanaSignMessageRpcResponse=O,exports.WalletApiSolanaSignTransactionRpcInput=_,exports.WalletApiSolanaSignTransactionRpcResponse=B,exports.WalletEntropyType=ze,exports.WalletGetBalanceInput=ke,exports.WalletGetBalanceResponse=fe,exports.WalletGetTransactionsInput=qe,exports.WalletGetTransactionsResponse=Qe,exports.WalletIdFromPath=We,exports.WalletResponse=ue,exports.WalletUpdateInput=Ge,exports.WalletsSearchInput=Pe;
