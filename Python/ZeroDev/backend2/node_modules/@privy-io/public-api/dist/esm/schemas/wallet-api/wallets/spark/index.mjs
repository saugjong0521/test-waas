import{z as t}from"zod";import{SparkNetwork as e,OutputWithPreviousTransactionData as o,SparkTransfer as i,SparkBalance as a,SparkLightningReceiveRequest as r,SparkLightningSendRequest as n}from"./utils.mjs";let s=t.object({network:e.optional()});const c=t.object({method:t.literal("transfer"),params:t.object({receiver_spark_address:t.string(),amount_sats:t.number()}).strict()}).merge(s).strict(),l=t.object({method:t.literal("getBalance")}).merge(s).strict(),m=t.object({method:t.literal("transferTokens"),params:t.object({token_identifier:t.string(),token_amount:t.number(),receiver_spark_address:t.string(),output_selection_strategy:t.enum(["SMALL_FIRST","LARGE_FIRST"]).optional(),selected_outputs:t.array(o).optional()}).strict()}).merge(s).strict(),d=t.object({method:t.literal("getStaticDepositAddress")}).merge(s).strict(),p=t.object({method:t.literal("getClaimStaticDepositQuote"),params:t.object({transaction_id:t.string(),output_index:t.number().optional()}).strict()}).merge(s).strict(),b=t.object({method:t.literal("claimStaticDeposit"),params:t.object({transaction_id:t.string(),output_index:t.number().optional(),credit_amount_sats:t.number(),signature:t.string()}).strict()}).merge(s).strict(),g=t.object({method:t.literal("createLightningInvoice"),params:t.object({amount_sats:t.number(),memo:t.string().optional(),expiry_seconds:t.number().optional(),include_spark_address:t.boolean().optional(),receiver_identity_pubkey:t.string().optional(),description_hash:t.string().optional()}).strict()}).merge(s).strict(),u=t.object({method:t.literal("payLightningInvoice"),params:t.object({invoice:t.string(),max_fee_sats:t.number(),prefer_spark:t.boolean().optional(),amount_sats_to_send:t.number().optional()}).strict()}).merge(s).strict(),_=t.discriminatedUnion("method",[c,l,m,d,p,b,g,u]),j=t.object({method:t.literal("transfer"),data:i.optional()}),h=t.object({method:t.literal("getBalance"),data:a.optional()}),k=t.object({method:t.literal("transferTokens"),data:t.object({id:t.string()}).optional()}),f=t.object({method:t.literal("getStaticDepositAddress"),data:t.object({address:t.string()}).optional()}),S=t.object({method:t.literal("getClaimStaticDepositQuote"),data:t.object({transaction_id:t.string(),output_index:t.number(),network:t.string(),credit_amount_sats:t.number(),signature:t.string()}).optional()}),v=t.object({method:t.literal("claimStaticDeposit"),data:t.object({transfer_id:t.string()}).optional()}),y=t.object({method:t.literal("createLightningInvoice"),data:r.optional()}),L=t.object({method:t.literal("payLightningInvoice"),data:t.union([i,n]).optional()});export{o as OutputWithPreviousTransactionData,a as SparkBalance,r as SparkLightningReceiveRequest,n as SparkLightningSendRequest,e as SparkNetwork,i as SparkTransfer,b as WalletApiClaimStaticDepositRpcInput,v as WalletApiClaimStaticDepositRpcResponse,g as WalletApiCreateLightningInvoiceRpcInput,y as WalletApiCreateLightningInvoiceRpcResponse,l as WalletApiGetBalanceRpcInput,h as WalletApiGetBalanceRpcResponse,p as WalletApiGetClaimStaticDepositQuoteRpcInput,S as WalletApiGetClaimStaticDepositQuoteRpcResponse,d as WalletApiGetStaticDepositAddressRpcInput,f as WalletApiGetStaticDepositAddressRpcResponse,u as WalletApiPayLightningInvoiceRpcInput,L as WalletApiPayLightningInvoiceRpcResponse,_ as WalletApiSparkRpcInput,c as WalletApiTransferRpcInput,j as WalletApiTransferRpcResponse,m as WalletApiTransferTokensRpcInput,k as WalletApiTransferTokensRpcResponse};
