import { SignUserActionChallengeRequest, UserActionChallengeResponse } from '../../baseAuthApi';
import { DfnsDelegatedApiClientOptions } from '../../dfnsDelegatedApiClient';
import * as T from './types';
export declare class DelegatedAuthClient {
    private apiOptions;
    constructor(apiOptions: DfnsDelegatedApiClientOptions);
    activateCredentialInit(request: T.ActivateCredentialRequest): Promise<UserActionChallengeResponse>;
    activateCredentialComplete(request: T.ActivateCredentialRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.ActivateCredentialResponse>;
    activatePersonalAccessTokenInit(request: T.ActivatePersonalAccessTokenRequest): Promise<UserActionChallengeResponse>;
    activatePersonalAccessTokenComplete(request: T.ActivatePersonalAccessTokenRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.ActivatePersonalAccessTokenResponse>;
    activateServiceAccountInit(request: T.ActivateServiceAccountRequest): Promise<UserActionChallengeResponse>;
    activateServiceAccountComplete(request: T.ActivateServiceAccountRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.ActivateServiceAccountResponse>;
    activateUserInit(request: T.ActivateUserRequest): Promise<UserActionChallengeResponse>;
    activateUserComplete(request: T.ActivateUserRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.ActivateUserResponse>;
    archivePersonalAccessTokenInit(request: T.ArchivePersonalAccessTokenRequest): Promise<UserActionChallengeResponse>;
    archivePersonalAccessTokenComplete(request: T.ArchivePersonalAccessTokenRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.ArchivePersonalAccessTokenResponse>;
    archiveServiceAccountInit(request: T.ArchiveServiceAccountRequest): Promise<UserActionChallengeResponse>;
    archiveServiceAccountComplete(request: T.ArchiveServiceAccountRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.ArchiveServiceAccountResponse>;
    archiveUserInit(request: T.ArchiveUserRequest): Promise<UserActionChallengeResponse>;
    archiveUserComplete(request: T.ArchiveUserRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.ArchiveUserResponse>;
    createCredentialInit(request: T.CreateCredentialRequest): Promise<UserActionChallengeResponse>;
    createCredentialComplete(request: T.CreateCredentialRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.CreateCredentialResponse>;
    createCredentialChallenge(request: T.CreateCredentialChallengeRequest): Promise<T.CreateCredentialChallengeResponse>;
    /** @deprecated, use createCredentialChallenge instead */
    createUserCredentialChallenge(request: T.CreateCredentialChallengeRequest): Promise<T.CreateCredentialChallengeResponse>;
    createCredentialChallengeWithCode(request: T.CreateCredentialChallengeWithCodeRequest): Promise<T.CreateCredentialChallengeWithCodeResponse>;
    createCredentialCodeInit(request: T.CreateCredentialCodeRequest): Promise<UserActionChallengeResponse>;
    createCredentialCodeComplete(request: T.CreateCredentialCodeRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.CreateCredentialCodeResponse>;
    createCredentialWithCode(request: T.CreateCredentialWithCodeRequest): Promise<T.CreateCredentialWithCodeResponse>;
    createDelegatedRecoveryChallengeInit(request: T.CreateDelegatedRecoveryChallengeRequest): Promise<UserActionChallengeResponse>;
    createDelegatedRecoveryChallengeComplete(request: T.CreateDelegatedRecoveryChallengeRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.CreateDelegatedRecoveryChallengeResponse>;
    createDelegatedRegistrationChallengeInit(request: T.CreateDelegatedRegistrationChallengeRequest): Promise<UserActionChallengeResponse>;
    createDelegatedRegistrationChallengeComplete(request: T.CreateDelegatedRegistrationChallengeRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.CreateDelegatedRegistrationChallengeResponse>;
    createLoginChallenge(request: T.CreateLoginChallengeRequest): Promise<T.CreateLoginChallengeResponse>;
    createPersonalAccessTokenInit(request: T.CreatePersonalAccessTokenRequest): Promise<UserActionChallengeResponse>;
    createPersonalAccessTokenComplete(request: T.CreatePersonalAccessTokenRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.CreatePersonalAccessTokenResponse>;
    createRecoveryChallenge(request: T.CreateRecoveryChallengeRequest): Promise<T.CreateRecoveryChallengeResponse>;
    createRegistrationChallenge(request: T.CreateRegistrationChallengeRequest): Promise<T.CreateRegistrationChallengeResponse>;
    createServiceAccountInit(request: T.CreateServiceAccountRequest): Promise<UserActionChallengeResponse>;
    createServiceAccountComplete(request: T.CreateServiceAccountRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.CreateServiceAccountResponse>;
    createSocialRegistrationChallenge(request: T.CreateSocialRegistrationChallengeRequest): Promise<T.CreateSocialRegistrationChallengeResponse>;
    createUserInit(request: T.CreateUserRequest): Promise<UserActionChallengeResponse>;
    createUserComplete(request: T.CreateUserRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.CreateUserResponse>;
    createUserActionChallenge(request: T.CreateUserActionChallengeRequest): Promise<T.CreateUserActionChallengeResponse>;
    /** @deprecated, use createUserActionChallenge instead */
    createUserActionSignatureChallenge(request: T.CreateUserActionChallengeRequest): Promise<T.CreateUserActionChallengeResponse>;
    createUserActionSignature(request: T.CreateUserActionSignatureRequest): Promise<T.CreateUserActionSignatureResponse>;
    deactivateCredentialInit(request: T.DeactivateCredentialRequest): Promise<UserActionChallengeResponse>;
    deactivateCredentialComplete(request: T.DeactivateCredentialRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.DeactivateCredentialResponse>;
    deactivatePersonalAccessTokenInit(request: T.DeactivatePersonalAccessTokenRequest): Promise<UserActionChallengeResponse>;
    deactivatePersonalAccessTokenComplete(request: T.DeactivatePersonalAccessTokenRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.DeactivatePersonalAccessTokenResponse>;
    deactivateServiceAccountInit(request: T.DeactivateServiceAccountRequest): Promise<UserActionChallengeResponse>;
    deactivateServiceAccountComplete(request: T.DeactivateServiceAccountRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.DeactivateServiceAccountResponse>;
    deactivateUserInit(request: T.DeactivateUserRequest): Promise<UserActionChallengeResponse>;
    deactivateUserComplete(request: T.DeactivateUserRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.DeactivateUserResponse>;
    delegatedLoginInit(request: T.DelegatedLoginRequest): Promise<UserActionChallengeResponse>;
    delegatedLoginComplete(request: T.DelegatedLoginRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.DelegatedLoginResponse>;
    getApplication(request: T.GetApplicationRequest): Promise<T.GetApplicationResponse>;
    getPersonalAccessToken(request: T.GetPersonalAccessTokenRequest): Promise<T.GetPersonalAccessTokenResponse>;
    getServiceAccount(request: T.GetServiceAccountRequest): Promise<T.GetServiceAccountResponse>;
    getUser(request: T.GetUserRequest): Promise<T.GetUserResponse>;
    listApplications(): Promise<T.ListApplicationsResponse>;
    listCredentials(): Promise<T.ListCredentialsResponse>;
    /** @deprecated, use listCredentials instead */
    listUserCredentials(): Promise<T.ListCredentialsResponse>;
    listPersonalAccessTokens(): Promise<T.ListPersonalAccessTokensResponse>;
    listServiceAccounts(): Promise<T.ListServiceAccountsResponse>;
    listUsers(request?: T.ListUsersRequest): Promise<T.ListUsersResponse>;
    login(request: T.LoginRequest): Promise<T.LoginResponse>;
    logout(request?: T.LogoutRequest): Promise<T.LogoutResponse>;
    recover(request: T.RecoverRequest): Promise<T.RecoverResponse>;
    /** @deprecated, use recover instead */
    createUserRecovery(request: T.RecoverRequest): Promise<T.RecoverResponse>;
    register(request: T.RegisterRequest): Promise<T.RegisterResponse>;
    /** @deprecated, use register instead */
    createUserRegistration(request: T.RegisterRequest): Promise<T.RegisterResponse>;
    registerEndUser(request: T.RegisterEndUserRequest): Promise<T.RegisterEndUserResponse>;
    resendRegistrationCode(request: T.ResendRegistrationCodeRequest): Promise<T.ResendRegistrationCodeResponse>;
    sendLoginCode(request: T.SendLoginCodeRequest): Promise<T.SendLoginCodeResponse>;
    sendRecoveryCode(request: T.SendRecoveryCodeRequest): Promise<T.SendRecoveryCodeResponse>;
    socialLogin(request: T.SocialLoginRequest): Promise<T.SocialLoginResponse>;
    updatePersonalAccessTokenInit(request: T.UpdatePersonalAccessTokenRequest): Promise<UserActionChallengeResponse>;
    updatePersonalAccessTokenComplete(request: T.UpdatePersonalAccessTokenRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.UpdatePersonalAccessTokenResponse>;
    updateServiceAccountInit(request: T.UpdateServiceAccountRequest): Promise<UserActionChallengeResponse>;
    updateServiceAccountComplete(request: T.UpdateServiceAccountRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.UpdateServiceAccountResponse>;
}
