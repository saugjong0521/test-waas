"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DelegatedAuthClient = void 0;
const baseAuthApi_1 = require("../../baseAuthApi");
const fetch_1 = require("../../utils/fetch");
const url_1 = require("../../utils/url");
class DelegatedAuthClient {
    constructor(apiOptions) {
        this.apiOptions = apiOptions;
    }
    async activateCredentialInit(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/credentials/activate', {
            path: request ?? {},
            query: {},
        });
        const challenge = await baseAuthApi_1.BaseAuthApi.createUserActionChallenge({
            userActionHttpMethod: 'PUT',
            userActionHttpPath: path,
            userActionPayload: JSON.stringify(request.body),
            userActionServerKind: 'Api',
        }, this.apiOptions);
        return challenge;
    }
    async activateCredentialComplete(request, signedChallenge) {
        const path = (0, url_1.buildPathAndQuery)('/auth/credentials/activate', {
            path: request ?? {},
            query: {},
        });
        const { userAction } = await baseAuthApi_1.BaseAuthApi.signUserActionChallenge(signedChallenge, this.apiOptions);
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'PUT',
            body: request.body,
            headers: { 'x-dfns-useraction': userAction },
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async activatePersonalAccessTokenInit(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/pats/:tokenId/activate', {
            path: request ?? {},
            query: {},
        });
        const challenge = await baseAuthApi_1.BaseAuthApi.createUserActionChallenge({
            userActionHttpMethod: 'PUT',
            userActionHttpPath: path,
            userActionPayload: JSON.stringify({}),
            userActionServerKind: 'Api',
        }, this.apiOptions);
        return challenge;
    }
    async activatePersonalAccessTokenComplete(request, signedChallenge) {
        const path = (0, url_1.buildPathAndQuery)('/auth/pats/:tokenId/activate', {
            path: request ?? {},
            query: {},
        });
        const { userAction } = await baseAuthApi_1.BaseAuthApi.signUserActionChallenge(signedChallenge, this.apiOptions);
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'PUT',
            body: {},
            headers: { 'x-dfns-useraction': userAction },
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async activateServiceAccountInit(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/service-accounts/:serviceAccountId/activate', {
            path: request ?? {},
            query: {},
        });
        const challenge = await baseAuthApi_1.BaseAuthApi.createUserActionChallenge({
            userActionHttpMethod: 'PUT',
            userActionHttpPath: path,
            userActionPayload: JSON.stringify({}),
            userActionServerKind: 'Api',
        }, this.apiOptions);
        return challenge;
    }
    async activateServiceAccountComplete(request, signedChallenge) {
        const path = (0, url_1.buildPathAndQuery)('/auth/service-accounts/:serviceAccountId/activate', {
            path: request ?? {},
            query: {},
        });
        const { userAction } = await baseAuthApi_1.BaseAuthApi.signUserActionChallenge(signedChallenge, this.apiOptions);
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'PUT',
            body: {},
            headers: { 'x-dfns-useraction': userAction },
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async activateUserInit(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/users/:userId/activate', {
            path: request ?? {},
            query: {},
        });
        const challenge = await baseAuthApi_1.BaseAuthApi.createUserActionChallenge({
            userActionHttpMethod: 'PUT',
            userActionHttpPath: path,
            userActionPayload: JSON.stringify({}),
            userActionServerKind: 'Api',
        }, this.apiOptions);
        return challenge;
    }
    async activateUserComplete(request, signedChallenge) {
        const path = (0, url_1.buildPathAndQuery)('/auth/users/:userId/activate', {
            path: request ?? {},
            query: {},
        });
        const { userAction } = await baseAuthApi_1.BaseAuthApi.signUserActionChallenge(signedChallenge, this.apiOptions);
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'PUT',
            body: {},
            headers: { 'x-dfns-useraction': userAction },
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async archivePersonalAccessTokenInit(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/pats/:tokenId', {
            path: request ?? {},
            query: {},
        });
        const challenge = await baseAuthApi_1.BaseAuthApi.createUserActionChallenge({
            userActionHttpMethod: 'DELETE',
            userActionHttpPath: path,
            userActionPayload: JSON.stringify({}),
            userActionServerKind: 'Api',
        }, this.apiOptions);
        return challenge;
    }
    async archivePersonalAccessTokenComplete(request, signedChallenge) {
        const path = (0, url_1.buildPathAndQuery)('/auth/pats/:tokenId', {
            path: request ?? {},
            query: {},
        });
        const { userAction } = await baseAuthApi_1.BaseAuthApi.signUserActionChallenge(signedChallenge, this.apiOptions);
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'DELETE',
            body: {},
            headers: { 'x-dfns-useraction': userAction },
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async archiveServiceAccountInit(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/service-accounts/:serviceAccountId', {
            path: request ?? {},
            query: {},
        });
        const challenge = await baseAuthApi_1.BaseAuthApi.createUserActionChallenge({
            userActionHttpMethod: 'DELETE',
            userActionHttpPath: path,
            userActionPayload: JSON.stringify({}),
            userActionServerKind: 'Api',
        }, this.apiOptions);
        return challenge;
    }
    async archiveServiceAccountComplete(request, signedChallenge) {
        const path = (0, url_1.buildPathAndQuery)('/auth/service-accounts/:serviceAccountId', {
            path: request ?? {},
            query: {},
        });
        const { userAction } = await baseAuthApi_1.BaseAuthApi.signUserActionChallenge(signedChallenge, this.apiOptions);
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'DELETE',
            body: {},
            headers: { 'x-dfns-useraction': userAction },
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async archiveUserInit(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/users/:userId', {
            path: request ?? {},
            query: {},
        });
        const challenge = await baseAuthApi_1.BaseAuthApi.createUserActionChallenge({
            userActionHttpMethod: 'DELETE',
            userActionHttpPath: path,
            userActionPayload: JSON.stringify({}),
            userActionServerKind: 'Api',
        }, this.apiOptions);
        return challenge;
    }
    async archiveUserComplete(request, signedChallenge) {
        const path = (0, url_1.buildPathAndQuery)('/auth/users/:userId', {
            path: request ?? {},
            query: {},
        });
        const { userAction } = await baseAuthApi_1.BaseAuthApi.signUserActionChallenge(signedChallenge, this.apiOptions);
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'DELETE',
            body: {},
            headers: { 'x-dfns-useraction': userAction },
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createCredentialInit(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/credentials', {
            path: request ?? {},
            query: {},
        });
        const challenge = await baseAuthApi_1.BaseAuthApi.createUserActionChallenge({
            userActionHttpMethod: 'POST',
            userActionHttpPath: path,
            userActionPayload: JSON.stringify(request.body),
            userActionServerKind: 'Api',
        }, this.apiOptions);
        return challenge;
    }
    async createCredentialComplete(request, signedChallenge) {
        const path = (0, url_1.buildPathAndQuery)('/auth/credentials', {
            path: request ?? {},
            query: {},
        });
        const { userAction } = await baseAuthApi_1.BaseAuthApi.signUserActionChallenge(signedChallenge, this.apiOptions);
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            headers: { 'x-dfns-useraction': userAction },
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createCredentialChallenge(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/credentials/init', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    /** @deprecated, use createCredentialChallenge instead */
    async createUserCredentialChallenge(request) {
        return this.createCredentialChallenge(request);
    }
    async createCredentialChallengeWithCode(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/credentials/code/init', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createCredentialCodeInit(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/credentials/code', {
            path: request ?? {},
            query: {},
        });
        const challenge = await baseAuthApi_1.BaseAuthApi.createUserActionChallenge({
            userActionHttpMethod: 'POST',
            userActionHttpPath: path,
            userActionPayload: JSON.stringify(request.body),
            userActionServerKind: 'Api',
        }, this.apiOptions);
        return challenge;
    }
    async createCredentialCodeComplete(request, signedChallenge) {
        const path = (0, url_1.buildPathAndQuery)('/auth/credentials/code', {
            path: request ?? {},
            query: {},
        });
        const { userAction } = await baseAuthApi_1.BaseAuthApi.signUserActionChallenge(signedChallenge, this.apiOptions);
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            headers: { 'x-dfns-useraction': userAction },
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createCredentialWithCode(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/credentials/code/verify', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createDelegatedRecoveryChallengeInit(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/recover/user/delegated', {
            path: request ?? {},
            query: {},
        });
        const challenge = await baseAuthApi_1.BaseAuthApi.createUserActionChallenge({
            userActionHttpMethod: 'POST',
            userActionHttpPath: path,
            userActionPayload: JSON.stringify(request.body),
            userActionServerKind: 'Api',
        }, this.apiOptions);
        return challenge;
    }
    async createDelegatedRecoveryChallengeComplete(request, signedChallenge) {
        const path = (0, url_1.buildPathAndQuery)('/auth/recover/user/delegated', {
            path: request ?? {},
            query: {},
        });
        const { userAction } = await baseAuthApi_1.BaseAuthApi.signUserActionChallenge(signedChallenge, this.apiOptions);
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            headers: { 'x-dfns-useraction': userAction },
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createDelegatedRegistrationChallengeInit(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/registration/delegated', {
            path: request ?? {},
            query: {},
        });
        const challenge = await baseAuthApi_1.BaseAuthApi.createUserActionChallenge({
            userActionHttpMethod: 'POST',
            userActionHttpPath: path,
            userActionPayload: JSON.stringify(request.body),
            userActionServerKind: 'Api',
        }, this.apiOptions);
        return challenge;
    }
    async createDelegatedRegistrationChallengeComplete(request, signedChallenge) {
        const path = (0, url_1.buildPathAndQuery)('/auth/registration/delegated', {
            path: request ?? {},
            query: {},
        });
        const { userAction } = await baseAuthApi_1.BaseAuthApi.signUserActionChallenge(signedChallenge, this.apiOptions);
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            headers: { 'x-dfns-useraction': userAction },
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createLoginChallenge(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/login/init', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createPersonalAccessTokenInit(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/pats', {
            path: request ?? {},
            query: {},
        });
        const challenge = await baseAuthApi_1.BaseAuthApi.createUserActionChallenge({
            userActionHttpMethod: 'POST',
            userActionHttpPath: path,
            userActionPayload: JSON.stringify(request.body),
            userActionServerKind: 'Api',
        }, this.apiOptions);
        return challenge;
    }
    async createPersonalAccessTokenComplete(request, signedChallenge) {
        const path = (0, url_1.buildPathAndQuery)('/auth/pats', {
            path: request ?? {},
            query: {},
        });
        const { userAction } = await baseAuthApi_1.BaseAuthApi.signUserActionChallenge(signedChallenge, this.apiOptions);
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            headers: { 'x-dfns-useraction': userAction },
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createRecoveryChallenge(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/recover/user/init', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createRegistrationChallenge(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/registration/init', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createServiceAccountInit(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/service-accounts', {
            path: request ?? {},
            query: {},
        });
        const challenge = await baseAuthApi_1.BaseAuthApi.createUserActionChallenge({
            userActionHttpMethod: 'POST',
            userActionHttpPath: path,
            userActionPayload: JSON.stringify(request.body),
            userActionServerKind: 'Api',
        }, this.apiOptions);
        return challenge;
    }
    async createServiceAccountComplete(request, signedChallenge) {
        const path = (0, url_1.buildPathAndQuery)('/auth/service-accounts', {
            path: request ?? {},
            query: {},
        });
        const { userAction } = await baseAuthApi_1.BaseAuthApi.signUserActionChallenge(signedChallenge, this.apiOptions);
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            headers: { 'x-dfns-useraction': userAction },
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createSocialRegistrationChallenge(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/registration/social', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createUserInit(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/users', {
            path: request ?? {},
            query: {},
        });
        const challenge = await baseAuthApi_1.BaseAuthApi.createUserActionChallenge({
            userActionHttpMethod: 'POST',
            userActionHttpPath: path,
            userActionPayload: JSON.stringify(request.body),
            userActionServerKind: 'Api',
        }, this.apiOptions);
        return challenge;
    }
    async createUserComplete(request, signedChallenge) {
        const path = (0, url_1.buildPathAndQuery)('/auth/users', {
            path: request ?? {},
            query: {},
        });
        const { userAction } = await baseAuthApi_1.BaseAuthApi.signUserActionChallenge(signedChallenge, this.apiOptions);
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            headers: { 'x-dfns-useraction': userAction },
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async createUserActionChallenge(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/action/init', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    /** @deprecated, use createUserActionChallenge instead */
    async createUserActionSignatureChallenge(request) {
        return this.createUserActionChallenge(request);
    }
    async createUserActionSignature(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/action', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async deactivateCredentialInit(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/credentials/deactivate', {
            path: request ?? {},
            query: {},
        });
        const challenge = await baseAuthApi_1.BaseAuthApi.createUserActionChallenge({
            userActionHttpMethod: 'PUT',
            userActionHttpPath: path,
            userActionPayload: JSON.stringify(request.body),
            userActionServerKind: 'Api',
        }, this.apiOptions);
        return challenge;
    }
    async deactivateCredentialComplete(request, signedChallenge) {
        const path = (0, url_1.buildPathAndQuery)('/auth/credentials/deactivate', {
            path: request ?? {},
            query: {},
        });
        const { userAction } = await baseAuthApi_1.BaseAuthApi.signUserActionChallenge(signedChallenge, this.apiOptions);
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'PUT',
            body: request.body,
            headers: { 'x-dfns-useraction': userAction },
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async deactivatePersonalAccessTokenInit(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/pats/:tokenId/deactivate', {
            path: request ?? {},
            query: {},
        });
        const challenge = await baseAuthApi_1.BaseAuthApi.createUserActionChallenge({
            userActionHttpMethod: 'PUT',
            userActionHttpPath: path,
            userActionPayload: JSON.stringify({}),
            userActionServerKind: 'Api',
        }, this.apiOptions);
        return challenge;
    }
    async deactivatePersonalAccessTokenComplete(request, signedChallenge) {
        const path = (0, url_1.buildPathAndQuery)('/auth/pats/:tokenId/deactivate', {
            path: request ?? {},
            query: {},
        });
        const { userAction } = await baseAuthApi_1.BaseAuthApi.signUserActionChallenge(signedChallenge, this.apiOptions);
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'PUT',
            body: {},
            headers: { 'x-dfns-useraction': userAction },
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async deactivateServiceAccountInit(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/service-accounts/:serviceAccountId/deactivate', {
            path: request ?? {},
            query: {},
        });
        const challenge = await baseAuthApi_1.BaseAuthApi.createUserActionChallenge({
            userActionHttpMethod: 'PUT',
            userActionHttpPath: path,
            userActionPayload: JSON.stringify({}),
            userActionServerKind: 'Api',
        }, this.apiOptions);
        return challenge;
    }
    async deactivateServiceAccountComplete(request, signedChallenge) {
        const path = (0, url_1.buildPathAndQuery)('/auth/service-accounts/:serviceAccountId/deactivate', {
            path: request ?? {},
            query: {},
        });
        const { userAction } = await baseAuthApi_1.BaseAuthApi.signUserActionChallenge(signedChallenge, this.apiOptions);
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'PUT',
            body: {},
            headers: { 'x-dfns-useraction': userAction },
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async deactivateUserInit(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/users/:userId/deactivate', {
            path: request ?? {},
            query: {},
        });
        const challenge = await baseAuthApi_1.BaseAuthApi.createUserActionChallenge({
            userActionHttpMethod: 'PUT',
            userActionHttpPath: path,
            userActionPayload: JSON.stringify({}),
            userActionServerKind: 'Api',
        }, this.apiOptions);
        return challenge;
    }
    async deactivateUserComplete(request, signedChallenge) {
        const path = (0, url_1.buildPathAndQuery)('/auth/users/:userId/deactivate', {
            path: request ?? {},
            query: {},
        });
        const { userAction } = await baseAuthApi_1.BaseAuthApi.signUserActionChallenge(signedChallenge, this.apiOptions);
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'PUT',
            body: {},
            headers: { 'x-dfns-useraction': userAction },
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async delegatedLoginInit(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/login/delegated', {
            path: request ?? {},
            query: {},
        });
        const challenge = await baseAuthApi_1.BaseAuthApi.createUserActionChallenge({
            userActionHttpMethod: 'POST',
            userActionHttpPath: path,
            userActionPayload: JSON.stringify(request.body),
            userActionServerKind: 'Api',
        }, this.apiOptions);
        return challenge;
    }
    async delegatedLoginComplete(request, signedChallenge) {
        const path = (0, url_1.buildPathAndQuery)('/auth/login/delegated', {
            path: request ?? {},
            query: {},
        });
        const { userAction } = await baseAuthApi_1.BaseAuthApi.signUserActionChallenge(signedChallenge, this.apiOptions);
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            headers: { 'x-dfns-useraction': userAction },
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async getApplication(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/apps/:appId', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async getPersonalAccessToken(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/pats/:tokenId', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async getServiceAccount(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/service-accounts/:serviceAccountId', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async getUser(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/users/:userId', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async listApplications() {
        const path = (0, url_1.buildPathAndQuery)('/auth/apps', {
            path: {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async listCredentials() {
        const path = (0, url_1.buildPathAndQuery)('/auth/credentials', {
            path: {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    /** @deprecated, use listCredentials instead */
    async listUserCredentials() {
        return this.listCredentials();
    }
    async listPersonalAccessTokens() {
        const path = (0, url_1.buildPathAndQuery)('/auth/pats', {
            path: {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async listServiceAccounts() {
        const path = (0, url_1.buildPathAndQuery)('/auth/service-accounts', {
            path: {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async listUsers(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/users', {
            path: request ?? {},
            query: request?.query ?? {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async login(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/login', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async logout(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/logout', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'PUT',
            body: request?.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async recover(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/recover/user', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    /** @deprecated, use recover instead */
    async createUserRecovery(request) {
        return this.recover(request);
    }
    async register(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/registration', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    /** @deprecated, use register instead */
    async createUserRegistration(request) {
        return this.register(request);
    }
    async registerEndUser(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/registration/enduser', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async resendRegistrationCode(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/registration/code', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'PUT',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async sendLoginCode(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/login/code', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async sendRecoveryCode(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/recover/user/code', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async socialLogin(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/login/social', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async updatePersonalAccessTokenInit(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/pats/:tokenId', {
            path: request ?? {},
            query: {},
        });
        const challenge = await baseAuthApi_1.BaseAuthApi.createUserActionChallenge({
            userActionHttpMethod: 'PUT',
            userActionHttpPath: path,
            userActionPayload: JSON.stringify(request.body),
            userActionServerKind: 'Api',
        }, this.apiOptions);
        return challenge;
    }
    async updatePersonalAccessTokenComplete(request, signedChallenge) {
        const path = (0, url_1.buildPathAndQuery)('/auth/pats/:tokenId', {
            path: request ?? {},
            query: {},
        });
        const { userAction } = await baseAuthApi_1.BaseAuthApi.signUserActionChallenge(signedChallenge, this.apiOptions);
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'PUT',
            body: request.body,
            headers: { 'x-dfns-useraction': userAction },
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async updateServiceAccountInit(request) {
        const path = (0, url_1.buildPathAndQuery)('/auth/service-accounts/:serviceAccountId', {
            path: request ?? {},
            query: {},
        });
        const challenge = await baseAuthApi_1.BaseAuthApi.createUserActionChallenge({
            userActionHttpMethod: 'PUT',
            userActionHttpPath: path,
            userActionPayload: JSON.stringify(request.body),
            userActionServerKind: 'Api',
        }, this.apiOptions);
        return challenge;
    }
    async updateServiceAccountComplete(request, signedChallenge) {
        const path = (0, url_1.buildPathAndQuery)('/auth/service-accounts/:serviceAccountId', {
            path: request ?? {},
            query: {},
        });
        const { userAction } = await baseAuthApi_1.BaseAuthApi.signUserActionChallenge(signedChallenge, this.apiOptions);
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'PUT',
            body: request.body,
            headers: { 'x-dfns-useraction': userAction },
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
}
exports.DelegatedAuthClient = DelegatedAuthClient;
