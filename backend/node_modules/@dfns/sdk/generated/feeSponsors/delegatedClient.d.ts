import { SignUserActionChallengeRequest, UserActionChallengeResponse } from '../../baseAuthApi';
import { DfnsDelegatedApiClientOptions } from '../../dfnsDelegatedApiClient';
import * as T from './types';
export declare class DelegatedFeeSponsorsClient {
    private apiOptions;
    constructor(apiOptions: DfnsDelegatedApiClientOptions);
    activateFeeSponsorInit(request: T.ActivateFeeSponsorRequest): Promise<UserActionChallengeResponse>;
    activateFeeSponsorComplete(request: T.ActivateFeeSponsorRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.ActivateFeeSponsorResponse>;
    createFeeSponsorInit(request: T.CreateFeeSponsorRequest): Promise<UserActionChallengeResponse>;
    createFeeSponsorComplete(request: T.CreateFeeSponsorRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.CreateFeeSponsorResponse>;
    deactivateFeeSponsorInit(request: T.DeactivateFeeSponsorRequest): Promise<UserActionChallengeResponse>;
    deactivateFeeSponsorComplete(request: T.DeactivateFeeSponsorRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.DeactivateFeeSponsorResponse>;
    deleteFeeSponsorInit(request: T.DeleteFeeSponsorRequest): Promise<UserActionChallengeResponse>;
    deleteFeeSponsorComplete(request: T.DeleteFeeSponsorRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.DeleteFeeSponsorResponse>;
    getFeeSponsor(request: T.GetFeeSponsorRequest): Promise<T.GetFeeSponsorResponse>;
    listFeeSponsors(request?: T.ListFeeSponsorsRequest): Promise<T.ListFeeSponsorsResponse>;
    listSponsoredFees(request: T.ListSponsoredFeesRequest): Promise<T.ListSponsoredFeesResponse>;
}
