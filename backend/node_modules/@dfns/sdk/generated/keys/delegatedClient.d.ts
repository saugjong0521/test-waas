import { SignUserActionChallengeRequest, UserActionChallengeResponse } from '../../baseAuthApi';
import { DfnsDelegatedApiClientOptions } from '../../dfnsDelegatedApiClient';
import * as T from './types';
export declare class DelegatedKeysClient {
    private apiOptions;
    constructor(apiOptions: DfnsDelegatedApiClientOptions);
    createKeyInit(request: T.CreateKeyRequest): Promise<UserActionChallengeResponse>;
    createKeyComplete(request: T.CreateKeyRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.CreateKeyResponse>;
    delegateKeyInit(request: T.DelegateKeyRequest): Promise<UserActionChallengeResponse>;
    delegateKeyComplete(request: T.DelegateKeyRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.DelegateKeyResponse>;
    deleteKeyInit(request: T.DeleteKeyRequest): Promise<UserActionChallengeResponse>;
    deleteKeyComplete(request: T.DeleteKeyRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.DeleteKeyResponse>;
    deriveKeyInit(request: T.DeriveKeyRequest): Promise<UserActionChallengeResponse>;
    deriveKeyComplete(request: T.DeriveKeyRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.DeriveKeyResponse>;
    exportKeyInit(request: T.ExportKeyRequest): Promise<UserActionChallengeResponse>;
    exportKeyComplete(request: T.ExportKeyRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.ExportKeyResponse>;
    generateSignatureInit(request: T.GenerateSignatureRequest): Promise<UserActionChallengeResponse>;
    generateSignatureComplete(request: T.GenerateSignatureRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.GenerateSignatureResponse>;
    getKey(request: T.GetKeyRequest): Promise<T.GetKeyResponse>;
    getSignature(request: T.GetSignatureRequest): Promise<T.GetSignatureResponse>;
    importKeyInit(request: T.ImportKeyRequest): Promise<UserActionChallengeResponse>;
    importKeyComplete(request: T.ImportKeyRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.ImportKeyResponse>;
    listKeys(request?: T.ListKeysRequest): Promise<T.ListKeysResponse>;
    listSignatures(request: T.ListSignaturesRequest): Promise<T.ListSignaturesResponse>;
    updateKeyInit(request: T.UpdateKeyRequest): Promise<UserActionChallengeResponse>;
    updateKeyComplete(request: T.UpdateKeyRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.UpdateKeyResponse>;
}
