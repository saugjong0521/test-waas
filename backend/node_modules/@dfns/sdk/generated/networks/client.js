"use strict";
/* eslint @typescript-eslint/no-unused-vars: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworksClient = void 0;
const fetch_1 = require("../../utils/fetch");
const userActionFetch_1 = require("../../utils/userActionFetch");
const url_1 = require("../../utils/url");
class NetworksClient {
    constructor(apiOptions) {
        this.apiOptions = apiOptions;
    }
    async createCantonValidator(request) {
        const path = (0, url_1.buildPathAndQuery)('/networks/:network/validators', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, userActionFetch_1.userActionFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async deleteCantonValidator(request) {
        const path = (0, url_1.buildPathAndQuery)('/networks/:network/validators/:validatorId', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, userActionFetch_1.userActionFetch)(path, {
            method: 'DELETE',
            body: {},
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async getFees(request) {
        const path = (0, url_1.buildPathAndQuery)('/networks/fees', {
            path: request ?? {},
            query: request?.query ?? {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async listCantonValidators(request) {
        const path = (0, url_1.buildPathAndQuery)('/networks/:network/validators', {
            path: request ?? {},
            query: request.query ?? {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async readContract(request) {
        const path = (0, url_1.buildPathAndQuery)('/networks/read-contract', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async updateCantonValidator(request) {
        const path = (0, url_1.buildPathAndQuery)('/networks/:network/validators/:validatorId', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, userActionFetch_1.userActionFetch)(path, {
            method: 'PUT',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
}
exports.NetworksClient = NetworksClient;
