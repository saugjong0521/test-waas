import { SignUserActionChallengeRequest, UserActionChallengeResponse } from '../../baseAuthApi';
import { DfnsDelegatedApiClientOptions } from '../../dfnsDelegatedApiClient';
import * as T from './types';
export declare class DelegatedPermissionsClient {
    private apiOptions;
    constructor(apiOptions: DfnsDelegatedApiClientOptions);
    archivePermissionInit(request: T.ArchivePermissionRequest): Promise<UserActionChallengeResponse>;
    archivePermissionComplete(request: T.ArchivePermissionRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.ArchivePermissionResponse>;
    createAssignmentInit(request: T.CreateAssignmentRequest): Promise<UserActionChallengeResponse>;
    createAssignmentComplete(request: T.CreateAssignmentRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.CreateAssignmentResponse>;
    createPermissionInit(request: T.CreatePermissionRequest): Promise<UserActionChallengeResponse>;
    createPermissionComplete(request: T.CreatePermissionRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.CreatePermissionResponse>;
    deleteAssignmentInit(request: T.DeleteAssignmentRequest): Promise<UserActionChallengeResponse>;
    deleteAssignmentComplete(request: T.DeleteAssignmentRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.DeleteAssignmentResponse>;
    getPermission(request: T.GetPermissionRequest): Promise<T.GetPermissionResponse>;
    listAssignments(request: T.ListAssignmentsRequest): Promise<T.ListAssignmentsResponse>;
    listPermissions(request?: T.ListPermissionsRequest): Promise<T.ListPermissionsResponse>;
    updatePermissionInit(request: T.UpdatePermissionRequest): Promise<UserActionChallengeResponse>;
    updatePermissionComplete(request: T.UpdatePermissionRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.UpdatePermissionResponse>;
}
