import { SignUserActionChallengeRequest, UserActionChallengeResponse } from '../../baseAuthApi';
import { DfnsDelegatedApiClientOptions } from '../../dfnsDelegatedApiClient';
import * as T from './types';
export declare class DelegatedStakingClient {
    private apiOptions;
    constructor(apiOptions: DfnsDelegatedApiClientOptions);
    createStakeInit(request: T.CreateStakeRequest): Promise<UserActionChallengeResponse>;
    createStakeComplete(request: T.CreateStakeRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.CreateStakeResponse>;
    createStakeActionInit(request: T.CreateStakeActionRequest): Promise<UserActionChallengeResponse>;
    createStakeActionComplete(request: T.CreateStakeActionRequest, signedChallenge: SignUserActionChallengeRequest): Promise<T.CreateStakeActionResponse>;
    getStakeRewards(request: T.GetStakeRewardsRequest): Promise<T.GetStakeRewardsResponse>;
    getStakes(request: T.GetStakesRequest): Promise<T.GetStakesResponse>;
    listStakeActions(request: T.ListStakeActionsRequest): Promise<T.ListStakeActionsResponse>;
    listStakes(request?: T.ListStakesRequest): Promise<T.ListStakesResponse>;
}
