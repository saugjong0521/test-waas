"use strict";
/* eslint @typescript-eslint/no-unused-vars: 0 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebhooksClient = void 0;
const fetch_1 = require("../../utils/fetch");
const userActionFetch_1 = require("../../utils/userActionFetch");
const url_1 = require("../../utils/url");
class WebhooksClient {
    constructor(apiOptions) {
        this.apiOptions = apiOptions;
    }
    async createWebhook(request) {
        const path = (0, url_1.buildPathAndQuery)('/webhooks', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, userActionFetch_1.userActionFetch)(path, {
            method: 'POST',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async deleteWebhook(request) {
        const path = (0, url_1.buildPathAndQuery)('/webhooks/:webhookId', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, userActionFetch_1.userActionFetch)(path, {
            method: 'DELETE',
            body: {},
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async getWebhook(request) {
        const path = (0, url_1.buildPathAndQuery)('/webhooks/:webhookId', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async getWebhookEvent(request) {
        const path = (0, url_1.buildPathAndQuery)('/webhooks/:webhookId/events/:webhookEventId', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async listWebhookEvents(request) {
        const path = (0, url_1.buildPathAndQuery)('/webhooks/:webhookId/events', {
            path: request ?? {},
            query: request.query ?? {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async listWebhooks(request) {
        const path = (0, url_1.buildPathAndQuery)('/webhooks', {
            path: request ?? {},
            query: request?.query ?? {},
        });
        const response = await (0, fetch_1.simpleFetch)(path, {
            method: 'GET',
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async pingWebhook(request) {
        const path = (0, url_1.buildPathAndQuery)('/webhooks/:webhookId/ping', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, userActionFetch_1.userActionFetch)(path, {
            method: 'POST',
            body: {},
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
    async updateWebhook(request) {
        const path = (0, url_1.buildPathAndQuery)('/webhooks/:webhookId', {
            path: request ?? {},
            query: {},
        });
        const response = await (0, userActionFetch_1.userActionFetch)(path, {
            method: 'PUT',
            body: request.body,
            apiOptions: this.apiOptions,
        });
        return response.json();
    }
}
exports.WebhooksClient = WebhooksClient;
