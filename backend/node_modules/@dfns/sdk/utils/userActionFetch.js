"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.userActionFetch = void 0;
const cross_fetch_1 = require("cross-fetch");
const fetch_1 = require("./fetch");
const baseAuthApi_1 = require("../baseAuthApi");
const dfnsError_1 = require("../dfnsError");
const userAction = (fetch) => {
    return async (resource, options) => {
        if (options.method !== 'GET') {
            const apiOptions = {
                ...options.apiOptions,
                baseUrl: options.apiOptions.baseAuthUrl || options.apiOptions.baseUrl,
            };
            if (!apiOptions.signer) {
                throw new dfnsError_1.DfnsError(-1, 'A "signer" needs to be passed to Dfns client.', {
                    detail: `Most non-readonly endpoints require "User Action Signing" flow.` +
                        ` During that flow, the credential "signer" that you passed will handle signing` +
                        ` the user action challenge, using your credential.`,
                });
            }
            const challenge = await baseAuthApi_1.BaseAuthApi.createUserActionChallenge({
                userActionPayload: options.body ?? '',
                userActionHttpMethod: options.method,
                userActionHttpPath: resource.pathname,
                userActionServerKind: apiOptions?.userActionServerKind || 'Api',
            }, apiOptions);
            const assertion = await apiOptions.signer.sign(challenge);
            const { userAction } = await baseAuthApi_1.BaseAuthApi.signUserActionChallenge({
                challengeIdentifier: challenge.challengeIdentifier,
                firstFactor: assertion,
            }, apiOptions);
            options.headers = {
                'x-dfns-useraction': userAction,
                ...(options.headers ?? {}),
            };
        }
        return fetch(resource, options);
    };
};
exports.userActionFetch = (0, fetch_1.fullUrl)((0, fetch_1.jsonSerializer)((0, fetch_1.dfnsAuth)(userAction((0, fetch_1.catchPolicyPending)((0, fetch_1.errorHandler)(cross_fetch_1.fetch))))));
