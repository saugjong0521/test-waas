import{z as t}from"zod";import{SUPPORTED_SMART_WALLET_TYPES as e}from"../constants/smart-wallets.mjs";export{BICONOMY,COINBASE_SMART_WALLET,KERNEL,LIGHT_ACCOUNT,SAFE,THIRDWEB}from"../constants/smart-wallets.mjs";const r=t.enum(e,{invalid_type_error:"Please specify a supported provider.",required_error:"Please specify a supported provider."});let n=t.string().regex(/^eip155:\d+$/,"Chain ID must be an eip155 chain ID");const a=t.object({policy_id:t.string().uuid()});let i=t.object({chain_id:n,bundler_url:t.string(),paymaster_url:t.string().optional(),rpc_url:t.string().optional(),chain_name:t.string().optional(),paymaster_context:a.optional()});const o=t.object({chain_id:n,bundler_url:t.string().optional(),paymaster_url:t.string().optional(),rpc_url:t.string().optional(),chain_name:t.string().optional(),paymaster_context:a.optional()}),l=t.discriminatedUnion("enabled",[t.object({enabled:t.literal(!1)}),t.object({enabled:t.literal(!0),smart_wallet_type:r,smart_wallet_version:t.string().optional(),configured_networks:t.array(i).min(1)})]),s=t.discriminatedUnion("enabled",[t.object({enabled:t.literal(!1)}),t.object({enabled:t.literal(!0),smart_wallet_type:r,smart_wallet_version:t.string().optional(),configured_networks:t.array(o).min(1)})]),p=l;export{a as AlchemyPaymasterContextSchema,e as SUPPORTED_SMART_WALLET_TYPES,s as SmartWalletConfigurationInputSchema,p as SmartWalletConfigurationResponseSchema,l as SmartWalletConfigurationSchema,o as SmartWalletNetworkConfigurationInputSchema,r as SmartWalletProvider};
