import{z as t}from"zod";import{InvalidInputError as e,PrivyErrorCode as i}from"@privy-io/api-base";import{Pagination as a}from"../../api.mjs";import{SolanaWalletAddress as r,WalletAddress as n}from"../../core.mjs";import{BaseTransactionResponse as o}from"../../transaction.mjs";import{PrivateKeyExportInput as s}from"../export.mjs";import{WalletApiSparkRpcInput as l,WalletApiTransferRpcResponse as d,WalletApiGetBalanceRpcResponse as c,WalletApiTransferTokensRpcResponse as p,WalletApiGetStaticDepositAddressRpcResponse as g,WalletApiClaimStaticDepositRpcResponse as u,WalletApiGetClaimStaticDepositQuoteRpcResponse as m,WalletApiPayLightningInvoiceRpcResponse as h,WalletApiCreateLightningInvoiceRpcResponse as _}from"./spark/index.mjs";export{WalletApiClaimStaticDepositRpcInput,WalletApiCreateLightningInvoiceRpcInput,WalletApiGetBalanceRpcInput,WalletApiGetClaimStaticDepositQuoteRpcInput,WalletApiGetStaticDepositAddressRpcInput,WalletApiPayLightningInvoiceRpcInput,WalletApiTransferRpcInput,WalletApiTransferTokensRpcInput}from"./spark/index.mjs";export{OutputWithPreviousTransactionData,SparkBalance,SparkLightningReceiveRequest,SparkLightningSendRequest,SparkNetwork,SparkTransfer}from"./spark/utils.mjs";import"bs58";import"libphonenumber-js/max";import"viem";const b=t.enum(["secp256k1","ed25519"]),y=t.string().regex(/^[mM]'?(\/\d+'?)*$/),j=t.literal("ECDSA"),v=t.literal("EdDSA"),f=t.union([j,v]),z=t.string().regex(/^[-a-z0-9]{3,8}:[-_a-zA-Z0-9]{1,32}$/,"Chain ID must be a valid CAIP-2 chain ID, e.g. 'eip155:1'");let x=t.object({address:r.optional(),chain_type:t.literal("solana").optional(),wallet_id:t.string().optional()}),k=t.object({address:n.optional(),chain_type:t.literal("ethereum").optional(),wallet_id:t.string().optional()});const w=t.enum(["root","manager","delegated-actions"]).nullable(),I=t.object({method:t.literal("signTransaction"),params:t.object({transaction:t.string(),encoding:t.literal("base64")}).strict()}).merge(x).strict(),A=t.object({method:t.literal("signAndSendTransaction"),caip2:z,params:t.object({transaction:t.string(),encoding:t.literal("base64")}).strict()}).merge(x).strict(),D=t.object({method:t.literal("signMessage"),params:t.object({message:t.string(),encoding:t.literal("base64")}).strict()}).merge(x).strict(),T=t.string().startsWith("0x").refine((t=>!t.includes(".")),"Invalid hex string: must start with '0x' and not contain decimal points"),S=T.transform((t=>t));let W=t.number().int().nonnegative().safe({message:'Please use hex string prefixed with "0x" to represent large numbers (e.g. "0xDE0B6B3A7640000").'});const R=t.union([T,W],{invalid_type_error:"Invalid quantity: must be either a hex string starting with '0x' or a non-negative integer."}),P=t.object({from:n.optional(),to:n.optional(),chain_id:R.optional(),nonce:R.optional(),data:T.optional(),value:R.optional(),type:t.union([t.literal(0),t.literal(1),t.literal(2)]).optional(),gas_limit:R.optional(),gas_price:R.optional(),max_fee_per_gas:R.optional(),max_priority_fee_per_gas:R.optional()}).strict(),C=t.object({method:t.literal("eth_signTransaction"),params:t.object({transaction:P}).strict()}).merge(k).strict(),L=t.object({method:t.literal("eth_sendTransaction"),caip2:z,params:t.object({transaction:P}).strict()}).merge(k).strict(),q=t.object({message:t.string(),encoding:t.union([t.literal("utf-8"),t.literal("hex")])}).strict(),O=t.object({method:t.literal("personal_sign"),params:q}).merge(k).strict(),B=t.object({method:t.literal("secp256k1_sign"),params:t.object({hash:S}).strict()}).merge(k).strict(),U=t.object({method:t.literal("eth_sign7702Authorization"),params:t.object({contract:n,chain_id:R,nonce:R.optional()}).strict()}).merge(k).strict(),E=t.object({params:t.object({hash:S}).strict()}).strict(),G=t.record(t.string(),t.any()),M=t.record(t.array(t.object({name:t.string(),type:t.string()}))),N=t.object({method:t.literal("eth_signTypedData_v4"),params:t.object({typed_data:t.object({domain:G,types:M,message:t.record(t.string(),t.any()),primary_type:t.string()}).strict()}).strict()}).merge(k).strict(),K=t.object({address:t.string(),method:t.literal("exportPrivateKey"),params:s}).strict(),V=t.discriminatedUnion("method",[C,L,O,N,B,U]),$=t.discriminatedUnion("method",[I,A,D]),Q=t.union([V,$,K,l]),Z=t.object({method:t.literal("signTransaction"),data:t.object({signed_transaction:t.string(),encoding:t.literal("base64")})}),F=t.object({method:t.literal("signAndSendTransaction"),data:t.object({transaction_id:t.string().optional(),hash:t.string(),caip2:z}).optional(),error:t.object({code:t.string(),message:t.string()}).optional()}),H=t.object({method:t.literal("signMessage"),data:t.object({signature:t.string(),encoding:t.literal("base64")})}),J=t.object({method:t.literal("eth_signTransaction"),data:t.object({signed_transaction:t.string(),encoding:t.literal("rlp")})}),X=t.object({method:t.literal("eth_sendTransaction"),data:t.object({transaction_id:t.string().optional(),hash:t.string(),caip2:z,transaction_request:P.optional()}).optional(),error:t.object({code:t.string(),message:t.string()}).optional()}),Y=t.object({method:t.literal("personal_sign"),data:t.object({signature:t.string(),encoding:t.literal("hex")})}),tt=t.object({method:t.literal("secp256k1_sign"),data:t.object({signature:T,encoding:t.literal("hex")})});let et=t.object({contract:n,chain_id:R,nonce:R,r:T,s:T,y_parity:t.number()});const it=t.object({method:t.literal("eth_sign7702Authorization"),data:t.object({authorization:et}).optional(),error:t.object({code:t.string(),message:t.string()}).optional()}),at=t.object({method:t.literal("eth_signTypedData_v4"),data:t.object({signature:t.string(),encoding:t.literal("hex")})}),rt=t.object({method:t.literal("exportPrivateKey"),data:s}),nt=t.object({data:t.object({signature:T,encoding:t.literal("hex")}).optional(),error:t.object({code:t.string(),message:t.string()}).optional()}).strict(),ot=t.discriminatedUnion("method",[Z,F,H,J,X,Y,tt,it,at,rt,d,c,p,g,u,m,h,_]),st=t.object({display_name:t.string().optional(),public_key:t.string(),role:w.optional()}),lt=t.literal("ethereum"),dt=t.literal("solana"),ct=t.literal("cosmos"),pt=t.literal("stellar"),gt=t.literal("sui"),ut=t.literal("tron"),mt=t.literal("bitcoin-segwit"),ht=t.literal("spark"),_t=t.union([ct,pt,gt,ut,mt]),bt="curve_signing",yt=t.literal("curve_signing"),jt=t.union([_t,ht]),vt=t.union([t.literal("solana"),t.literal("ethereum")]),ft=t.union([jt,vt]),zt=t.enum(["hd","private-key"]),xt=t.object({id:t.string(),address:t.string(),public_key:t.string().optional(),created_at:t.number(),exported_at:t.number().nullable(),imported_at:t.number().nullable(),chain_type:ft,policy_ids:t.array(t.string()),authorization_threshold:t.number().optional(),additional_signers:t.array(t.object({signer_id:t.string().cuid2(),override_policy_ids:t.array(t.string()).optional()})),owner_id:t.string().cuid2().nullable()}),kt=t.string().cuid2(),wt=t.string(),It=t.union([t.object({user_id:t.string().startsWith("did:privy:",{message:"user_id must start with did:privy:"})}).strict(),t.object({public_key:wt}).strict(),t.null()]),At={owner:It.optional(),owner_id:kt.nullable().optional()},Dt=t.array(t.string().cuid2()).max(1,"Only one policy ID can be set").optional(),Tt=t.array(t.object({signer_id:kt,override_policy_ids:Dt}).strict()),St=t.object({chain_type:ft,policy_ids:Dt,authorization_key_ids:t.array(t.string()).optional(),authorization_threshold:t.number().optional(),additional_signers:Tt.optional(),...At}).strict(),Wt=St.refine((t=>{let e=void 0!==t.authorization_key_ids||void 0!==t.authorization_threshold,i=void 0!==t.additional_signers;return!e||!i}),"Please provide either additional_signers or authorization_key_ids, not both").refine((t=>void 0===t.authorization_threshold||t.authorization_threshold>=1&&t.authorization_key_ids&&t.authorization_threshold<=t.authorization_key_ids.length),{message:"If specified, authorization_threshold must be an integer between 1 and the length of authorization_key_ids."}).refine((t=>!t.owner||!t.owner_id),{message:"Only one of owner or owner_id can be provided."}).catch((t=>{throw new e(t.error.message,i.INVALID_DATA)})),Rt=t.object({id:t.string(),chain_type:ft,address:t.string(),authorization_threshold:t.number().optional()}),Pt=t.object({wallet_id:t.string({required_error:"Wallet ID must be provided",invalid_type_error:"Wallet ID is not a valid string"}).min(1)}).catch((({error:t})=>{throw new e(t.message,i.INVALID_DATA)})),Ct=t.enum(["usdc","eth","pol"]),Lt=t.enum(["sol"]),qt=t.enum([...Ct.options,...Lt.options]),Ot=t.enum(["ethereum","arbitrum","base","linea","optimism","polygon","solana","zksync_era"]),Bt=t.enum(["usd"]),Ut=t.object({asset:t.union([qt,t.array(qt).max(10)]),chain:t.union([Ot,t.array(Ot).max(10)]),include_currency:Bt.optional()}),Et=t.object({chain:Ot,asset:qt,raw_value:t.string(),raw_value_decimals:t.number(),display_values:t.record(t.union([qt,Bt]),t.string())}),Gt=t.object({balances:t.array(Et.refine((t=>t.asset in t.display_values),{message:"display_values must include the asset as a key",path:["display_values"]}))}),Mt=t.object({id:t.string()}),Nt=t.object({id:t.string(),display_name:t.string().nullable(),public_key:t.string(),role:w,created_at:t.number()}),Kt=t.object({id:t.string(),display_name:t.string().nullable(),public_key:t.string(),created_at:t.number()}),Vt=a.extend({chain_type:ft.optional(),user_id:t.string().optional()}).strict(),$t=t.object({policy_ids:Dt,authorization_key_ids:t.array(t.string()).optional(),authorization_threshold:t.number().optional(),additional_signers:Tt.optional(),...At}).strict().superRefine(((t,e)=>{Object.values(t).every((t=>void 0===t||""===t))&&e.addIssue({code:"custom",message:"At least one field must be provided"}),void 0!==t.owner&&void 0!==t.owner_id&&e.addIssue({code:"custom",message:"Only one of owner or owner_id can be provided."}),void 0!==t.authorization_threshold&&0!==t.authorization_threshold&&(t.authorization_threshold<0&&e.addIssue({code:"custom",path:["authorization_threshold"],message:"`authorization_threshold` must be non-negative if specified."}),void 0===t.authorization_key_ids&&e.addIssue({code:"custom",path:["authorization_key_ids"],message:"An array of `authorization_key_ids` must be provided for a non-zero `authorization_threshold`."}),t.authorization_key_ids&&t.authorization_threshold>t.authorization_key_ids.length&&e.addIssue({code:"custom",path:["authorization_threshold"],message:"`authorization_threshold` must be non-negative if specified."}))})),Qt=a.extend({chain:t.literal("base"),asset:t.union([qt,t.array(qt).max(2)])}).strict(),Zt=t.object({type:t.literal("transfer_sent"),sender:t.string(),sender_privy_user_id:t.string().nullable(),recipient:t.string(),recipient_privy_user_id:t.string().nullable()}).strict().merge(Et),Ft=t.object({type:t.literal("transfer_received"),sender:t.string(),sender_privy_user_id:t.string().nullable(),recipient:t.string(),recipient_privy_user_id:t.string().nullable()}).strict().merge(Et),Ht=t.discriminatedUnion("type",[Zt,Ft]),Jt=o.extend({details:Ht.nullable()}),Xt=Jt.extend({privy_transaction_id:t.string(),wallet_id:t.string()}),Yt=t.object({transactions:t.array(Xt),next_cursor:t.string().nullable()});export{Tt as AdditionalSignerInput,qt as Asset,Et as AssetAmountDetails,Nt as AuthorizationKeyDashboardResponse,Kt as AuthorizationKeyResponse,w as AuthorizationKeyRole,Bt as BalanceFiatCurrency,St as BaseWalletApiCreateInput,mt as BitcoinSegwit,z as CAIP2,bt as CURVE_SIGNING,Ot as ChainNameInput,ft as ChainType,ct as Cosmos,_t as CurveSigningChainTypes,yt as CurveSigningLiteral,b as CurveType,j as ECDSA,v as EdDSA,lt as Ethereum,Ct as EthereumAsset,jt as ExtendedChainTypes,vt as FirstClassChainTypes,y as HDPath,S as Hash,T as Hex,kt as KeyQuorumId,It as OwnerInput,At as OwnerInputFields,wt as P256PublicKey,Dt as PolicyInput,Xt as PrivyTransactionResponseWithDetails,R as Quantity,f as SigningAlgorithm,dt as Solana,Lt as SolanaAsset,ht as Spark,pt as Stellar,gt as Sui,Ht as TransactionDetail,Jt as TransactionResponseWithDetails,Ft as TransferReceivedTransactionDetail,Zt as TransferSentTransactionDetail,ut as Tron,G as TypedDataDomainInputParams,M as TypedDataTypesInputParams,P as UnsignedEthereumTransaction,u as WalletApiClaimStaticDepositRpcResponse,Wt as WalletApiCreateInput,_ as WalletApiCreateLightningInvoiceRpcResponse,Rt as WalletApiCreateResponse,O as WalletApiEthereumPersonalSignRpcInput,q as WalletApiEthereumPersonalSignRpcInputParams,Y as WalletApiEthereumPersonalSignRpcResponse,V as WalletApiEthereumRpcInput,B as WalletApiEthereumSecp256k1SignRpcInput,tt as WalletApiEthereumSecp256k1SignRpcResponse,L as WalletApiEthereumSendTransactionRpcInput,X as WalletApiEthereumSendTransactionRpcResponse,U as WalletApiEthereumSign7702AuthorizationRpcInput,it as WalletApiEthereumSign7702AuthorizationRpcResponse,C as WalletApiEthereumSignTransactionRpcInput,J as WalletApiEthereumSignTransactionRpcResponse,N as WalletApiEthereumSignTypedDataRpcInput,at as WalletApiEthereumSignTypedDataRpcResponse,K as WalletApiExportPrivateKeyRpcInput,rt as WalletApiExportPrivateKeyRpcResponse,c as WalletApiGetBalanceRpcResponse,m as WalletApiGetClaimStaticDepositQuoteRpcResponse,g as WalletApiGetStaticDepositAddressRpcResponse,h as WalletApiPayLightningInvoiceRpcResponse,E as WalletApiRawSignInput,nt as WalletApiRawSignResponse,st as WalletApiRegisterAuthorizationKeyInput,Mt as WalletApiRevokeAuthorizationKeyInput,Q as WalletApiRpcInput,ot as WalletApiRpcResponse,$ as WalletApiSolanaRpcInput,A as WalletApiSolanaSignAndSendTransactionRpcInput,F as WalletApiSolanaSignAndSendTransactionRpcResponse,D as WalletApiSolanaSignMessageRpcInput,H as WalletApiSolanaSignMessageRpcResponse,I as WalletApiSolanaSignTransactionRpcInput,Z as WalletApiSolanaSignTransactionRpcResponse,l as WalletApiSparkRpcInput,d as WalletApiTransferRpcResponse,p as WalletApiTransferTokensRpcResponse,zt as WalletEntropyType,Ut as WalletGetBalanceInput,Gt as WalletGetBalanceResponse,Qt as WalletGetTransactionsInput,Yt as WalletGetTransactionsResponse,Pt as WalletIdFromPath,xt as WalletResponse,$t as WalletUpdateInput,Vt as WalletsSearchInput};
