import{z as t}from"zod";let e=t.object({owner_identifiers:t.array(t.string()),threshold:t.number(),public_key:t.string(),public_shares:t.record(t.string(),t.string()),updated_time:t.date()});const n=t.enum(["MAINNET","REGTEST"]);let i=t.object({id:t.string(),tree_id:t.string(),value:t.number(),parent_node_id:t.string().optional(),node_tx:t.string(),refund_tx:t.string(),vout:t.number(),verifying_public_key:t.string(),owner_identity_public_key:t.string(),signing_keyshare:e.optional(),status:t.string(),network:n}),r=t.object({leaf:i.optional(),secret_cipher:t.string(),signature:t.string(),intermediate_refund_tx:t.string()});const o=t.object({id:t.string(),sender_identity_public_key:t.string(),receiver_identity_public_key:t.string(),status:t.string(),total_value:t.number(),expiry_time:t.date().optional(),leaves:t.array(r),created_time:t.date().optional(),updated_time:t.date().optional(),type:t.string(),transfer_direction:t.string()});let a=t.object({raw_token_identifier:t.string(),token_public_key:t.string(),token_name:t.string(),token_ticker:t.string(),decimals:t.number(),max_supply:t.string()}),s=t.object({balance:t.string(),token_metadata:a});const _=t.object({balance:t.string(),token_balances:t.record(t.string(),s)});let g=t.object({id:t.string().optional(),owner_public_key:t.string(),revocation_commitment:t.string().optional(),withdraw_bond_sats:t.number().optional(),withdraw_relative_block_locktime:t.number().optional(),token_public_key:t.string().optional(),token_identifier:t.string().optional(),token_amount:t.string()});const c=t.object({output:g.optional(),previous_transaction_hash:t.string(),previous_transaction_vout:t.number()}),p=t.object({id:t.string(),created_at:t.string(),updated_at:t.string(),network:t.string(),invoice:t.any(),status:t.string(),typename:t.string(),transfer:t.any().optional(),payment_preimage:t.string().optional(),receiver_identity_public_key:t.string().optional()}),d=t.object({id:t.string(),created_at:t.string(),updated_at:t.string(),network:t.string(),encoded_invoice:t.string(),fee:t.object({original_value:t.number(),original_unit:t.string(),preferred_currency_unit:t.string(),preferred_currency_value_rounded:t.number(),preferred_currency_value_approx:t.number()}),idempotency_key:t.string(),status:t.string(),typename:t.string(),transfer:t.any().optional(),payment_preimage:t.string().optional()});export{c as OutputWithPreviousTransactionData,_ as SparkBalance,p as SparkLightningReceiveRequest,d as SparkLightningSendRequest,n as SparkNetwork,o as SparkTransfer};
